<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CodebuddyPersistentProjectState">
    <option name="autoFileSelection" value="true" />
    <option name="promptHistory">
      <list>
        <option value="ok i want to set up the current project to be a node web app using the files i already created" />
        <option value="yes" />
        <option value="ry again with the files ive given you" />
        <option value="ok in the llm directory, i want to install ollama" />
        <option value="what does ollama.js do" />
        <option value="wats the best way to integrate ollama into this current project" />
        <option value="youre allowed to creat files if needed" />
        <option value="llama2 is installed" />
        <option value="how do i modify the llama to act as a nasa instructor" />
        <option value="do i need to run the ollama.js as well?" />
        <option value="how do i start it then?" />
        <option value="ive made changes to the port used" />
        <option value="Error: listen tcp 127.0.0.1:11434: bind: address already in use&#10;" />
        <option value="whats wrong with my code" />
        <option value="please actually look at the codebase, something is wrong" />
        <option value="please document y code thoruohly to explain everythings use" />
        <option value="i didt ask you to touch the style sheet, i just want mroe comments" />
        <option value="anything wrong with my code?" />
        <option value="Chat error: Error: Failed to get response from Ollama: Request failed with status code 500&#10;    at OllamaService.chat (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/ollama.js:104:19)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)&#10;    at async /home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js:70:26&#10;" />
        <option value="/usr/bin/node /home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js&#10;Initializing Ollama service...&#10;Default model llama2 not found, downloading...&#10;Starting to pull model llama2. This may take several minutes...&#10;Model llama2 pull completed: &#10;pulling manifest &#10;pulling 8934d96d3f08... 100% ▕████████████████▏ 3.8 GB                         &#10;pulling 8c17c2ebb0ea... 100% ▕████████████████▏ 7.0 KB                         &#10;pulling 7c23fb36d801... 100% ▕████████████████▏ 4.8 KB                         &#10;pulling 2e0493f67d0c... 100% ▕████████████████▏   59 B                         &#10;pulling fa304d675061... 100% ▕████████████████▏   91 B                         &#10;pulling 42ba7f8a01dd... 100% ▕████████████████▏  557 B                         &#10;verifying sha256 digest &#10;writing manifest &#10;success &#10;&#10;Ollama service initialization complete&#10;Server initialization complete, ready to handle requests&#10;Server is running on http://localhost:3000&#10;[68hgjd] Starting chat request&#10;[68hgjd] Ollama chat error: {&#10;  message: 'Request failed with status code 500',&#10;  status: 500,&#10;  data: {&#10;    error: 'model requires more system memory (8.4 GiB) than is available (8.3 GiB)'&#10;  }&#10;}&#10;Chat error: Error: Ollama server error. The model might be overloaded or experiencing issues.&#10;    at OllamaService.chat (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/ollama.js:133:23)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)&#10;    at async /home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js:92:26&#10;[bngu8o] Starting chat request&#10;[bngu8o] Ollama chat error: { message: '', status: undefined, data: undefined }&#10;Chat error: Error: Could not connect to Ollama. Please ensure Ollama is running.&#10;    at OllamaService.chat (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/ollama.js:131:23)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)&#10;    at async /home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js:92:26&#10;&#10;&#10;" />
        <option value="what if i want to add lanceDB to this project" />
        <option value="/usr/bin/npm install&#10;npm error code E404&#10;npm error 404 Not Found - GET https://registry.npmjs.org/lance-db - Not found&#10;npm error 404&#10;npm error 404  'lance-db@^0.5.0' is not in this registry.&#10;npm error 404&#10;npm error 404 Note that you can also install from a&#10;npm error 404 tarball, folder, http url, or git url.&#10;npm error A complete log of this run can be found in: /home/barthmalemew/.npm/_logs/2024-11-02T20_05_43_695Z-debug-0.log&#10;&#10;Process finished with exit code 1&#10;" />
        <option value="but i want lance db" />
        <option value="/usr/bin/npm install&#10;npm error code ETARGET&#10;npm error notarget No matching version found for vectorizer@^1.2.0.&#10;npm error notarget In most cases you or one of your dependencies are requesting&#10;npm error notarget a package version that doesn't exist.&#10;npm error A complete log of this run can be found in: /home/barthmalemew/.npm/_logs/2024-11-02T20_08_30_028Z-debug-0.log&#10;&#10;Process finished with exit code 1&#10;" />
        <option value="cool, so ideally i want to store question in the db for the LLM to access, these will serve as the questions the LLM has with the user" />
        <option value="is anything redundat in my code" />
        <option value="I want the LLM itself to interpret if the answer is correct, like a teacher, and point our possible mistakes the user made" />
        <option value="/usr/bin/node /home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js&#10;Initializing Ollama service...&#10;Default model llama2 not found, downloading...&#10;Starting to pull model llama2. This may take several minutes...&#10;Model llama2 pull completed: &#10;pulling manifest &#10;pulling 8934d96d3f08... 100% ▕████████████████▏ 3.8 GB                         &#10;pulling 8c17c2ebb0ea... 100% ▕████████████████▏ 7.0 KB                         &#10;pulling 7c23fb36d801... 100% ▕████████████████▏ 4.8 KB                         &#10;pulling 2e0493f67d0c... 100% ▕████████████████▏   59 B                         &#10;pulling fa304d675061... 100% ▕████████████████▏   91 B                         &#10;pulling 42ba7f8a01dd... 100% ▕████████████████▏  557 B                         &#10;verifying sha256 digest &#10;writing manifest &#10;success &#10;&#10;Ollama service initialization complete&#10;Database initialization failed: Error: At least one record or a schema needs to be provided&#10;    at makeArrowTable (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/@lancedb/lancedb/dist/arrow.js:298:15)&#10;    at Connection.createTable (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/@lancedb/lancedb/dist/connection.js:116:48)&#10;    at DatabaseService.initialize (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/database.js:30:44)&#10;    at async initializeServer (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js:42:9)&#10;Server initialization failed: AppError: Database initialization failed&#10;    at DatabaseService.initialize (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/database.js:54:19)&#10;    at async initializeServer (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js:42:9) {&#10;  statusCode: 500,&#10;  status: 'error'&#10;}&#10;&#10;Process finished with exit code 1&#10;&#10;" />
        <option value="yes we need to give the database data" />
        <option value="how do i put data in the data.db" />
        <option value="cant i just manually enter data into the file?" />
        <option value="doesnt data bricks have tool to do this easier?" />
        <option value="please remove all code and files that arent needed for the project, like the insertsion script" />
        <option value="please remove files that arent usful" />
        <option value="are those all really needed?" />
        <option value="/usr/bin/node /home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js&#10;Server initialization failed: TypeError: ollamaService.initialize is not a function&#10;    at initializeServer (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js:17:29)&#10;    at Object.&lt;anonymous&gt; (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js:50:1)&#10;    at Module._compile (node:internal/modules/cjs/loader:1469:14)&#10;    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)&#10;    at Module.load (node:internal/modules/cjs/loader:1288:32)&#10;    at Module._load (node:internal/modules/cjs/loader:1104:12)&#10;    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12)&#10;    at node:internal/main/run_main_module:28:49&#10;&#10;Process finished with exit code 1&#10;&#10;" />
        <option value="/usr/bin/node /home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js&#10;Initializing Ollama service...&#10;Ollama initialization failed: Model llama2 not found in Ollama server&#10;Server initialization failed: Error: Failed to initialize Ollama service: Model llama2 not found in Ollama server&#10;    at OllamaService.initialize (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/ollama.js:32:19)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)&#10;    at async initializeServer (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js:26:9)&#10;Failed to initialize server: Error: Failed to initialize Ollama service: Model llama2 not found in Ollama server&#10;    at OllamaService.initialize (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/ollama.js:32:19)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)&#10;    at async initializeServer (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js:26:9)&#10;&#10;Process finished with exit code 1&#10;&#10;" />
        <option value="/usr/bin/node /home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js&#10;Initializing Ollama service...&#10;Model llama2 not found. Attempting to pull...&#10;Pulling model llama2...&#10;Successfully pulled model llama2&#10;Ollama service initialized with model: llama2&#10;Server initialization complete, ready to handle requests&#10;Server is running on http://localhost:3000&#10;Ollama chat error: AxiosError: Request failed with status code 500&#10;    at settle (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:2019:12)&#10;    at IncomingMessage.handleStreamEnd (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:3135:11)&#10;    at IncomingMessage.emit (node:events:531:35)&#10;    at endReadableNT (node:internal/streams/readable:1696:12)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)&#10;    at Axios.request (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:4287:41)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)&#10;    at async OllamaService.chat (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/ollama.js:59:30)&#10;    at async /home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js:51:26 {&#10;  code: 'ERR_BAD_RESPONSE',&#10;  config: {&#10;    transitional: {&#10;      silentJSONParsing: true,&#10;      forcedJSONParsing: true,&#10;      clarifyTimeoutError: false&#10;    },&#10;    adapter: [ 'xhr', 'http', 'fetch' ],&#10;    transformRequest: [ [Function: transformRequest] ],&#10;    transformResponse: [ [Function: transformResponse] ],&#10;    timeout: 0,&#10;    xsrfCookieName: 'XSRF-TOKEN',&#10;    xsrfHeaderName: 'X-XSRF-TOKEN',&#10;    maxContentLength: -1,&#10;    maxBodyLength: -1,&#10;    env: { FormData: [Function], Blob: [class Blob] },&#10;    validateStatus: [Function: validateStatus],&#10;    headers: Object [AxiosHeaders] {&#10;      Accept: 'application/json, text/plain, */*',&#10;      'Content-Type': 'application/json',&#10;      'User-Agent': 'axios/1.7.7',&#10;      'Content-Length': '612',&#10;      'Accept-Encoding': 'gzip, compress, deflate, br'&#10;    },&#10;    method: 'post',&#10;    url: 'http://localhost:11434/api/generate',&#10;    data: '{&quot;model&quot;:&quot;llama2&quot;,&quot;prompt&quot;:&quot;You are a NASA instructor providing clear, concise information about space exploration and science. \\n        Your responses should be:\\n        - Brief and to the point (2-3 sentences for general responses)\\n        - Professional and factual\\n        - Free of roleplay elements or emotive actions\\n        - Focused on accurate scientific information\\n        - Written in a clear, straightforward style\\n        \\n        If the user asks a specific technical question, you may provide more detailed information, but keep general responses concise.\\n\\nUser: hello&quot;,&quot;stream&quot;:false}'&#10;  },&#10;  request: &lt;ref *1&gt; ClientRequest {&#10;    _events: [Object: null prototype] {&#10;      abort: [Function (anonymous)],&#10;      aborted: [Function (anonymous)],&#10;      connect: [Function (anonymous)],&#10;      error: [Function (anonymous)],&#10;      socket: [Function (anonymous)],&#10;      timeout: [Function (anonymous)],&#10;      finish: [Function: requestOnFinish]&#10;    },&#10;    _eventsCount: 7,&#10;    _maxListeners: undefined,&#10;    outputData: [],&#10;    outputSize: 0,&#10;    writable: true,&#10;    destroyed: true,&#10;    _last: false,&#10;    chunkedEncoding: false,&#10;    shouldKeepAlive: true,&#10;    maxRequestsOnConnectionReached: false,&#10;    _defaultKeepAlive: true,&#10;    useChunkedEncodingByDefault: true,&#10;    sendDate: false,&#10;    _removedConnection: false,&#10;    _removedContLen: false,&#10;    _removedTE: false,&#10;    strictContentLength: false,&#10;    _contentLength: '612',&#10;    _hasBody: true,&#10;    _trailer: '',&#10;    finished: true,&#10;    _headerSent: true,&#10;    _closed: true,&#10;    socket: Socket {&#10;      connecting: false,&#10;      _hadError: false,&#10;      _parent: null,&#10;      _host: 'localhost',&#10;      _closeAfterHandlingError: false,&#10;      _events: [Object],&#10;      _readableState: [ReadableState],&#10;      _writableState: [WritableState],&#10;      allowHalfOpen: false,&#10;      _maxListeners: undefined,&#10;      _eventsCount: 6,&#10;      _sockname: null,&#10;      _pendingData: null,&#10;      _pendingEncoding: '',&#10;      server: null,&#10;      _server: null,&#10;      timeout: 5000,&#10;      parser: null,&#10;      _httpMessage: null,&#10;      autoSelectFamilyAttemptedAddresses: [Array],&#10;      [Symbol(async_id_symbol)]: -1,&#10;      [Symbol(kHandle)]: [TCP],&#10;      [Symbol(lastWriteQueueSize)]: 0,&#10;      [Symbol(timeout)]: Timeout {&#10;        _idleTimeout: 5000,&#10;        _idlePrev: [TimersList],&#10;        _idleNext: [Timeout],&#10;        _idleStart: 6892,&#10;        _onTimeout: [Function: bound ],&#10;        _timerArgs: undefined,&#10;        _repeat: null,&#10;        _destroyed: false,&#10;        [Symbol(refed)]: false,&#10;        [Symbol(kHasPrimitive)]: false,&#10;        [Symbol(asyncId)]: 137,&#10;        [Symbol(triggerId)]: 135&#10;      },&#10;      [Symbol(kBuffer)]: null,&#10;      [Symbol(kBufferCb)]: null,&#10;      [Symbol(kBufferGen)]: null,&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kSetNoDelay)]: true,&#10;      [Symbol(kSetKeepAlive)]: true,&#10;      [Symbol(kSetKeepAliveInitialDelay)]: 1,&#10;      [Symbol(kBytesRead)]: 0,&#10;      [Symbol(kBytesWritten)]: 0&#10;    },&#10;    _header: 'POST /api/generate HTTP/1.1\r\n' +&#10;      'Accept: application/json, text/plain, */*\r\n' +&#10;      'Content-Type: application/json\r\n' +&#10;      'User-Agent: axios/1.7.7\r\n' +&#10;      'Content-Length: 612\r\n' +&#10;      'Accept-Encoding: gzip, compress, deflate, br\r\n' +&#10;      'Host: localhost:11434\r\n' +&#10;      'Connection: keep-alive\r\n' +&#10;      '\r\n',&#10;    _keepAliveTimeout: 0,&#10;    _onPendingData: [Function: nop],&#10;    agent: Agent {&#10;      _events: [Object: null prototype],&#10;      _eventsCount: 2,&#10;      _maxListeners: undefined,&#10;      defaultPort: 80,&#10;      protocol: 'http:',&#10;      options: [Object: null prototype],&#10;      requests: [Object: null prototype] {},&#10;      sockets: [Object: null prototype] {},&#10;      freeSockets: [Object: null prototype],&#10;      keepAliveMsecs: 1000,&#10;      keepAlive: true,&#10;      maxSockets: Infinity,&#10;      maxFreeSockets: 256,&#10;      scheduling: 'lifo',&#10;      maxTotalSockets: Infinity,&#10;      totalSocketCount: 1,&#10;      [Symbol(shapeMode)]: false,&#10;      [Symbol(kCapture)]: false&#10;    },&#10;    socketPath: undefined,&#10;    method: 'POST',&#10;    maxHeaderSize: undefined,&#10;    insecureHTTPParser: undefined,&#10;    joinDuplicateHeaders: undefined,&#10;    path: '/api/generate',&#10;    _ended: true,&#10;    res: IncomingMessage {&#10;      _events: [Object],&#10;      _readableState: [ReadableState],&#10;      _maxListeners: undefined,&#10;      socket: null,&#10;      httpVersionMajor: 1,&#10;      httpVersionMinor: 1,&#10;      httpVersion: '1.1',&#10;      complete: true,&#10;      rawHeaders: [Array],&#10;      rawTrailers: [],&#10;      joinDuplicateHeaders: undefined,&#10;      aborted: false,&#10;      upgrade: false,&#10;      url: '',&#10;      method: null,&#10;      statusCode: 500,&#10;      statusMessage: 'Internal Server Error',&#10;      client: [Socket],&#10;      _consuming: false,&#10;      _dumped: false,&#10;      req: [Circular *1],&#10;      _eventsCount: 4,&#10;      responseUrl: 'http://localhost:11434/api/generate',&#10;      redirects: [],&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kHeaders)]: [Object],&#10;      [Symbol(kHeadersCount)]: 6,&#10;      [Symbol(kTrailers)]: null,&#10;      [Symbol(kTrailersCount)]: 0&#10;    },&#10;    aborted: false,&#10;    timeoutCb: null,&#10;    upgradeOrConnect: false,&#10;    parser: null,&#10;    maxHeadersCount: null,&#10;    reusedSocket: false,&#10;    host: 'localhost',&#10;    protocol: 'http:',&#10;    _redirectable: Writable {&#10;      _events: [Object],&#10;      _writableState: [WritableState],&#10;      _maxListeners: undefined,&#10;      _options: [Object],&#10;      _ended: true,&#10;      _ending: true,&#10;      _redirectCount: 0,&#10;      _redirects: [],&#10;      _requestBodyLength: 612,&#10;      _requestBodyBuffers: [],&#10;      _eventsCount: 3,&#10;      _onNativeResponse: [Function (anonymous)],&#10;      _currentRequest: [Circular *1],&#10;      _currentUrl: 'http://localhost:11434/api/generate',&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false&#10;    },&#10;    [Symbol(shapeMode)]: false,&#10;    [Symbol(kCapture)]: false,&#10;    [Symbol(kBytesWritten)]: 0,&#10;    [Symbol(kNeedDrain)]: false,&#10;    [Symbol(corked)]: 0,&#10;    [Symbol(kOutHeaders)]: [Object: null prototype] {&#10;      accept: [Array],&#10;      'content-type': [Array],&#10;      'user-agent': [Array],&#10;      'content-length': [Array],&#10;      'accept-encoding': [Array],&#10;      host: [Array]&#10;    },&#10;    [Symbol(errored)]: null,&#10;    [Symbol(kHighWaterMark)]: 16384,&#10;    [Symbol(kRejectNonStandardBodyWrites)]: false,&#10;    [Symbol(kUniqueHeaders)]: null&#10;  },&#10;  response: {&#10;    status: 500,&#10;    statusText: 'Internal Server Error',&#10;    headers: Object [AxiosHeaders] {&#10;      'content-type': 'application/json; charset=utf-8',&#10;      date: 'Sat, 02 Nov 2024 20:48:44 GMT',&#10;      'content-length': '83'&#10;    },&#10;    config: {&#10;      transitional: [Object],&#10;      adapter: [Array],&#10;      transformRequest: [Array],&#10;      transformResponse: [Array],&#10;      timeout: 0,&#10;      xsrfCookieName: 'XSRF-TOKEN',&#10;      xsrfHeaderName: 'X-XSRF-TOKEN',&#10;      maxContentLength: -1,&#10;      maxBodyLength: -1,&#10;      env: [Object],&#10;      validateStatus: [Function: validateStatus],&#10;      headers: [Object [AxiosHeaders]],&#10;      method: 'post',&#10;      url: 'http://localhost:11434/api/generate',&#10;      data: '{&quot;model&quot;:&quot;llama2&quot;,&quot;prompt&quot;:&quot;You are a NASA instructor providing clear, concise information about space exploration and science. \\n        Your responses should be:\\n        - Brief and to the point (2-3 sentences for general responses)\\n        - Professional and factual\\n        - Free of roleplay elements or emotive actions\\n        - Focused on accurate scientific information\\n        - Written in a clear, straightforward style\\n        \\n        If the user asks a specific technical question, you may provide more detailed information, but keep general responses concise.\\n\\nUser: hello&quot;,&quot;stream&quot;:false}'&#10;    },&#10;    request: &lt;ref *1&gt; ClientRequest {&#10;      _events: [Object: null prototype],&#10;      _eventsCount: 7,&#10;      _maxListeners: undefined,&#10;      outputData: [],&#10;      outputSize: 0,&#10;      writable: true,&#10;      destroyed: true,&#10;      _last: false,&#10;      chunkedEncoding: false,&#10;      shouldKeepAlive: true,&#10;      maxRequestsOnConnectionReached: false,&#10;      _defaultKeepAlive: true,&#10;      useChunkedEncodingByDefault: true,&#10;      sendDate: false,&#10;      _removedConnection: false,&#10;      _removedContLen: false,&#10;      _removedTE: false,&#10;      strictContentLength: false,&#10;      _contentLength: '612',&#10;      _hasBody: true,&#10;      _trailer: '',&#10;      finished: true,&#10;      _headerSent: true,&#10;      _closed: true,&#10;      socket: [Socket],&#10;      _header: 'POST /api/generate HTTP/1.1\r\n' +&#10;        'Accept: application/json, text/plain, */*\r\n' +&#10;        'Content-Type: application/json\r\n' +&#10;        'User-Agent: axios/1.7.7\r\n' +&#10;        'Content-Length: 612\r\n' +&#10;        'Accept-Encoding: gzip, compress, deflate, br\r\n' +&#10;        'Host: localhost:11434\r\n' +&#10;        'Connection: keep-alive\r\n' +&#10;        '\r\n',&#10;      _keepAliveTimeout: 0,&#10;      _onPendingData: [Function: nop],&#10;      agent: [Agent],&#10;      socketPath: undefined,&#10;      method: 'POST',&#10;      maxHeaderSize: undefined,&#10;      insecureHTTPParser: undefined,&#10;      joinDuplicateHeaders: undefined,&#10;      path: '/api/generate',&#10;      _ended: true,&#10;      res: [IncomingMessage],&#10;      aborted: false,&#10;      timeoutCb: null,&#10;      upgradeOrConnect: false,&#10;      parser: null,&#10;      maxHeadersCount: null,&#10;      reusedSocket: false,&#10;      host: 'localhost',&#10;      protocol: 'http:',&#10;      _redirectable: [Writable],&#10;      [Symbol(shapeMode)]: false,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kBytesWritten)]: 0,&#10;      [Symbol(kNeedDrain)]: false,&#10;      [Symbol(corked)]: 0,&#10;      [Symbol(kOutHeaders)]: [Object: null prototype],&#10;      [Symbol(errored)]: null,&#10;      [Symbol(kHighWaterMark)]: 16384,&#10;      [Symbol(kRejectNonStandardBodyWrites)]: false,&#10;      [Symbol(kUniqueHeaders)]: null&#10;    },&#10;    data: {&#10;      error: 'model requires more system memory (8.4 GiB) than is available (7.8 GiB)'&#10;    }&#10;  },&#10;  status: 500&#10;}&#10;Ollama chat error: AxiosError: Request failed with status code 500&#10;    at settle (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:2019:12)&#10;    at IncomingMessage.handleStreamEnd (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:3135:11)&#10;    at IncomingMessage.emit (node:events:531:35)&#10;    at endReadableNT (node:internal/streams/readable:1696:12)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)&#10;    at Axios.request (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:4287:41)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)&#10;    at async OllamaService.chat (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/ollama.js:59:30)&#10;    at async /home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js:51:26 {&#10;  code: 'ERR_BAD_RESPONSE',&#10;  config: {&#10;    transitional: {&#10;      silentJSONParsing: true,&#10;      forcedJSONParsing: true,&#10;      clarifyTimeoutError: false&#10;    },&#10;    adapter: [ 'xhr', 'http', 'fetch' ],&#10;    transformRequest: [ [Function: transformRequest] ],&#10;    transformResponse: [ [Function: transformResponse] ],&#10;    timeout: 0,&#10;    xsrfCookieName: 'XSRF-TOKEN',&#10;    xsrfHeaderName: 'X-XSRF-TOKEN',&#10;    maxContentLength: -1,&#10;    maxBodyLength: -1,&#10;    env: { FormData: [Function], Blob: [class Blob] },&#10;    validateStatus: [Function: validateStatus],&#10;    headers: Object [AxiosHeaders] {&#10;      Accept: 'application/json, text/plain, */*',&#10;      'Content-Type': 'application/json',&#10;      'User-Agent': 'axios/1.7.7',&#10;      'Content-Length': '612',&#10;      'Accept-Encoding': 'gzip, compress, deflate, br'&#10;    },&#10;    method: 'post',&#10;    url: 'http://localhost:11434/api/generate',&#10;    data: '{&quot;model&quot;:&quot;llama2&quot;,&quot;prompt&quot;:&quot;You are a NASA instructor providing clear, concise information about space exploration and science. \\n        Your responses should be:\\n        - Brief and to the point (2-3 sentences for general responses)\\n        - Professional and factual\\n        - Free of roleplay elements or emotive actions\\n        - Focused on accurate scientific information\\n        - Written in a clear, straightforward style\\n        \\n        If the user asks a specific technical question, you may provide more detailed information, but keep general responses concise.\\n\\nUser: hello&quot;,&quot;stream&quot;:false}'&#10;  },&#10;  request: &lt;ref *1&gt; ClientRequest {&#10;    _events: [Object: null prototype] {&#10;      abort: [Function (anonymous)],&#10;      aborted: [Function (anonymous)],&#10;      connect: [Function (anonymous)],&#10;      error: [Function (anonymous)],&#10;      socket: [Function (anonymous)],&#10;      timeout: [Function (anonymous)],&#10;      finish: [Function: requestOnFinish]&#10;    },&#10;    _eventsCount: 7,&#10;    _maxListeners: undefined,&#10;    outputData: [],&#10;    outputSize: 0,&#10;    writable: true,&#10;    destroyed: true,&#10;    _last: false,&#10;    chunkedEncoding: false,&#10;    shouldKeepAlive: true,&#10;    maxRequestsOnConnectionReached: false,&#10;    _defaultKeepAlive: true,&#10;    useChunkedEncodingByDefault: true,&#10;    sendDate: false,&#10;    _removedConnection: false,&#10;    _removedContLen: false,&#10;    _removedTE: false,&#10;    strictContentLength: false,&#10;    _contentLength: '612',&#10;    _hasBody: true,&#10;    _trailer: '',&#10;    finished: true,&#10;    _headerSent: true,&#10;    _closed: true,&#10;    socket: Socket {&#10;      connecting: false,&#10;      _hadError: false,&#10;      _parent: null,&#10;      _host: 'localhost',&#10;      _closeAfterHandlingError: false,&#10;      _events: [Object],&#10;      _readableState: [ReadableState],&#10;      _writableState: [WritableState],&#10;      allowHalfOpen: false,&#10;      _maxListeners: undefined,&#10;      _eventsCount: 6,&#10;      _sockname: null,&#10;      _pendingData: null,&#10;      _pendingEncoding: '',&#10;      server: null,&#10;      _server: null,&#10;      timeout: 5000,&#10;      parser: null,&#10;      _httpMessage: null,&#10;      autoSelectFamilyAttemptedAddresses: [Array],&#10;      [Symbol(async_id_symbol)]: -1,&#10;      [Symbol(kHandle)]: [TCP],&#10;      [Symbol(lastWriteQueueSize)]: 0,&#10;      [Symbol(timeout)]: Timeout {&#10;        _idleTimeout: 5000,&#10;        _idlePrev: [TimersList],&#10;        _idleNext: [TimersList],&#10;        _idleStart: 24960,&#10;        _onTimeout: [Function: bound ],&#10;        _timerArgs: undefined,&#10;        _repeat: null,&#10;        _destroyed: false,&#10;        [Symbol(refed)]: false,&#10;        [Symbol(kHasPrimitive)]: false,&#10;        [Symbol(asyncId)]: 175,&#10;        [Symbol(triggerId)]: 173&#10;      },&#10;      [Symbol(kBuffer)]: null,&#10;      [Symbol(kBufferCb)]: null,&#10;      [Symbol(kBufferGen)]: null,&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kSetNoDelay)]: true,&#10;      [Symbol(kSetKeepAlive)]: true,&#10;      [Symbol(kSetKeepAliveInitialDelay)]: 1,&#10;      [Symbol(kBytesRead)]: 0,&#10;      [Symbol(kBytesWritten)]: 0&#10;    },&#10;    _header: 'POST /api/generate HTTP/1.1\r\n' +&#10;      'Accept: application/json, text/plain, */*\r\n' +&#10;      'Content-Type: application/json\r\n' +&#10;      'User-Agent: axios/1.7.7\r\n' +&#10;      'Content-Length: 612\r\n' +&#10;      'Accept-Encoding: gzip, compress, deflate, br\r\n' +&#10;      'Host: localhost:11434\r\n' +&#10;      'Connection: keep-alive\r\n' +&#10;      '\r\n',&#10;    _keepAliveTimeout: 0,&#10;    _onPendingData: [Function: nop],&#10;    agent: Agent {&#10;      _events: [Object: null prototype],&#10;      _eventsCount: 2,&#10;      _maxListeners: undefined,&#10;      defaultPort: 80,&#10;      protocol: 'http:',&#10;      options: [Object: null prototype],&#10;      requests: [Object: null prototype] {},&#10;      sockets: [Object: null prototype] {},&#10;      freeSockets: [Object: null prototype],&#10;      keepAliveMsecs: 1000,&#10;      keepAlive: true,&#10;      maxSockets: Infinity,&#10;      maxFreeSockets: 256,&#10;      scheduling: 'lifo',&#10;      maxTotalSockets: Infinity,&#10;      totalSocketCount: 1,&#10;      [Symbol(shapeMode)]: false,&#10;      [Symbol(kCapture)]: false&#10;    },&#10;    socketPath: undefined,&#10;    method: 'POST',&#10;    maxHeaderSize: undefined,&#10;    insecureHTTPParser: undefined,&#10;    joinDuplicateHeaders: undefined,&#10;    path: '/api/generate',&#10;    _ended: true,&#10;    res: IncomingMessage {&#10;      _events: [Object],&#10;      _readableState: [ReadableState],&#10;      _maxListeners: undefined,&#10;      socket: null,&#10;      httpVersionMajor: 1,&#10;      httpVersionMinor: 1,&#10;      httpVersion: '1.1',&#10;      complete: true,&#10;      rawHeaders: [Array],&#10;      rawTrailers: [],&#10;      joinDuplicateHeaders: undefined,&#10;      aborted: false,&#10;      upgrade: false,&#10;      url: '',&#10;      method: null,&#10;      statusCode: 500,&#10;      statusMessage: 'Internal Server Error',&#10;      client: [Socket],&#10;      _consuming: false,&#10;      _dumped: false,&#10;      req: [Circular *1],&#10;      _eventsCount: 4,&#10;      responseUrl: 'http://localhost:11434/api/generate',&#10;      redirects: [],&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kHeaders)]: [Object],&#10;      [Symbol(kHeadersCount)]: 6,&#10;      [Symbol(kTrailers)]: null,&#10;      [Symbol(kTrailersCount)]: 0&#10;    },&#10;    aborted: false,&#10;    timeoutCb: null,&#10;    upgradeOrConnect: false,&#10;    parser: null,&#10;    maxHeadersCount: null,&#10;    reusedSocket: false,&#10;    host: 'localhost',&#10;    protocol: 'http:',&#10;    _redirectable: Writable {&#10;      _events: [Object],&#10;      _writableState: [WritableState],&#10;      _maxListeners: undefined,&#10;      _options: [Object],&#10;      _ended: true,&#10;      _ending: true,&#10;      _redirectCount: 0,&#10;      _redirects: [],&#10;      _requestBodyLength: 612,&#10;      _requestBodyBuffers: [],&#10;      _eventsCount: 3,&#10;      _onNativeResponse: [Function (anonymous)],&#10;      _currentRequest: [Circular *1],&#10;      _currentUrl: 'http://localhost:11434/api/generate',&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false&#10;    },&#10;    [Symbol(shapeMode)]: false,&#10;    [Symbol(kCapture)]: false,&#10;    [Symbol(kBytesWritten)]: 0,&#10;    [Symbol(kNeedDrain)]: false,&#10;    [Symbol(corked)]: 0,&#10;    [Symbol(kOutHeaders)]: [Object: null prototype] {&#10;      accept: [Array],&#10;      'content-type': [Array],&#10;      'user-agent': [Array],&#10;      'content-length': [Array],&#10;      'accept-encoding': [Array],&#10;      host: [Array]&#10;    },&#10;    [Symbol(errored)]: null,&#10;    [Symbol(kHighWaterMark)]: 16384,&#10;    [Symbol(kRejectNonStandardBodyWrites)]: false,&#10;    [Symbol(kUniqueHeaders)]: null&#10;  },&#10;  response: {&#10;    status: 500,&#10;    statusText: 'Internal Server Error',&#10;    headers: Object [AxiosHeaders] {&#10;      'content-type': 'application/json; charset=utf-8',&#10;      date: 'Sat, 02 Nov 2024 20:49:02 GMT',&#10;      'content-length': '83'&#10;    },&#10;    config: {&#10;      transitional: [Object],&#10;      adapter: [Array],&#10;      transformRequest: [Array],&#10;      transformResponse: [Array],&#10;      timeout: 0,&#10;      xsrfCookieName: 'XSRF-TOKEN',&#10;      xsrfHeaderName: 'X-XSRF-TOKEN',&#10;      maxContentLength: -1,&#10;      maxBodyLength: -1,&#10;      env: [Object],&#10;      validateStatus: [Function: validateStatus],&#10;      headers: [Object [AxiosHeaders]],&#10;      method: 'post',&#10;      url: 'http://localhost:11434/api/generate',&#10;      data: '{&quot;model&quot;:&quot;llama2&quot;,&quot;prompt&quot;:&quot;You are a NASA instructor providing clear, concise information about space exploration and science. \\n        Your responses should be:\\n        - Brief and to the point (2-3 sentences for general responses)\\n        - Professional and factual\\n        - Free of roleplay elements or emotive actions\\n        - Focused on accurate scientific information\\n        - Written in a clear, straightforward style\\n        \\n        If the user asks a specific technical question, you may provide more detailed information, but keep general responses concise.\\n\\nUser: hello&quot;,&quot;stream&quot;:false}'&#10;    },&#10;    request: &lt;ref *1&gt; ClientRequest {&#10;      _events: [Object: null prototype],&#10;      _eventsCount: 7,&#10;      _maxListeners: undefined,&#10;      outputData: [],&#10;      outputSize: 0,&#10;      writable: true,&#10;      destroyed: true,&#10;      _last: false,&#10;      chunkedEncoding: false,&#10;      shouldKeepAlive: true,&#10;      maxRequestsOnConnectionReached: false,&#10;      _defaultKeepAlive: true,&#10;      useChunkedEncodingByDefault: true,&#10;      sendDate: false,&#10;      _removedConnection: false,&#10;      _removedContLen: false,&#10;      _removedTE: false,&#10;      strictContentLength: false,&#10;      _contentLength: '612',&#10;      _hasBody: true,&#10;      _trailer: '',&#10;      finished: true,&#10;      _headerSent: true,&#10;      _closed: true,&#10;      socket: [Socket],&#10;      _header: 'POST /api/generate HTTP/1.1\r\n' +&#10;        'Accept: application/json, text/plain, */*\r\n' +&#10;        'Content-Type: application/json\r\n' +&#10;        'User-Agent: axios/1.7.7\r\n' +&#10;        'Content-Length: 612\r\n' +&#10;        'Accept-Encoding: gzip, compress, deflate, br\r\n' +&#10;        'Host: localhost:11434\r\n' +&#10;        'Connection: keep-alive\r\n' +&#10;        '\r\n',&#10;      _keepAliveTimeout: 0,&#10;      _onPendingData: [Function: nop],&#10;      agent: [Agent],&#10;      socketPath: undefined,&#10;      method: 'POST',&#10;      maxHeaderSize: undefined,&#10;      insecureHTTPParser: undefined,&#10;      joinDuplicateHeaders: undefined,&#10;      path: '/api/generate',&#10;      _ended: true,&#10;      res: [IncomingMessage],&#10;      aborted: false,&#10;      timeoutCb: null,&#10;      upgradeOrConnect: false,&#10;      parser: null,&#10;      maxHeadersCount: null,&#10;      reusedSocket: false,&#10;      host: 'localhost',&#10;      protocol: 'http:',&#10;      _redirectable: [Writable],&#10;      [Symbol(shapeMode)]: false,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kBytesWritten)]: 0,&#10;      [Symbol(kNeedDrain)]: false,&#10;      [Symbol(corked)]: 0,&#10;      [Symbol(kOutHeaders)]: [Object: null prototype],&#10;      [Symbol(errored)]: null,&#10;      [Symbol(kHighWaterMark)]: 16384,&#10;      [Symbol(kRejectNonStandardBodyWrites)]: false,&#10;      [Symbol(kUniqueHeaders)]: null&#10;    },&#10;    data: {&#10;      error: 'model requires more system memory (8.4 GiB) than is available (8.0 GiB)'&#10;    }&#10;  },&#10;  status: 500&#10;}&#10;&#10;" />
        <option value="woah wtf why are pulling orca mini???" />
        <option value="      Accept: 'application/json, text/plain, */*',&#10;      'Content-Type': 'application/json',&#10;      'User-Agent': 'axios/1.7.7',&#10;      'Content-Length': '612',&#10;      'Accept-Encoding': 'gzip, compress, deflate, br'&#10;    },&#10;    method: 'post',&#10;    url: 'http://localhost:11434/api/generate',&#10;    data: '{&quot;model&quot;:&quot;llama2&quot;,&quot;prompt&quot;:&quot;You are a NASA instructor providing clear, concise information about space exploration and science. \\n        Your responses should be:\\n        - Brief and to the point (2-3 sentences for general responses)\\n        - Professional and factual\\n        - Free of roleplay elements or emotive actions\\n        - Focused on accurate scientific information\\n        - Written in a clear, straightforward style\\n        \\n        If the user asks a specific technical question, you may provide more detailed information, but keep general responses concise.\\n\\nUser: hello&quot;,&quot;stream&quot;:false}'&#10;  },&#10;  request: &lt;ref *1&gt; ClientRequest {&#10;    _events: [Object: null prototype] {&#10;      abort: [Function (anonymous)],&#10;      aborted: [Function (anonymous)],&#10;      connect: [Function (anonymous)],&#10;      error: [Function (anonymous)],&#10;      socket: [Function (anonymous)],&#10;      timeout: [Function (anonymous)],&#10;      finish: [Function: requestOnFinish]&#10;    },&#10;    _eventsCount: 7,&#10;    _maxListeners: undefined,&#10;    outputData: [],&#10;    outputSize: 0,&#10;    writable: true,&#10;    destroyed: true,&#10;    _last: false,&#10;    chunkedEncoding: false,&#10;    shouldKeepAlive: true,&#10;    maxRequestsOnConnectionReached: false,&#10;    _defaultKeepAlive: true,&#10;    useChunkedEncodingByDefault: true,&#10;    sendDate: false,&#10;    _removedConnection: false,&#10;    _removedContLen: false,&#10;    _removedTE: false,&#10;    strictContentLength: false,&#10;    _contentLength: '612',&#10;    _hasBody: true,&#10;    _trailer: '',&#10;    finished: true,&#10;    _headerSent: true,&#10;    _closed: true,&#10;    socket: Socket {&#10;      connecting: false,&#10;      _hadError: false,&#10;      _parent: null,&#10;      _host: 'localhost',&#10;      _closeAfterHandlingError: false,&#10;      _events: [Object],&#10;      _readableState: [ReadableState],&#10;      _writableState: [WritableState],&#10;      allowHalfOpen: false,&#10;      _maxListeners: undefined,&#10;      _eventsCount: 6,&#10;      _sockname: null,&#10;      _pendingData: null,&#10;      _pendingEncoding: '',&#10;      server: null,&#10;      _server: null,&#10;      timeout: 5000,&#10;      parser: null,&#10;      _httpMessage: null,&#10;      autoSelectFamilyAttemptedAddresses: [Array],&#10;      [Symbol(async_id_symbol)]: -1,&#10;      [Symbol(kHandle)]: [TCP],&#10;      [Symbol(lastWriteQueueSize)]: 0,&#10;      [Symbol(timeout)]: Timeout {&#10;        _idleTimeout: 5000,&#10;        _idlePrev: [TimersList],&#10;        _idleNext: [TimersList],&#10;        _idleStart: 49525,&#10;        _onTimeout: [Function: bound ],&#10;        _timerArgs: undefined,&#10;        _repeat: null,&#10;        _destroyed: false,&#10;        [Symbol(refed)]: false,&#10;        [Symbol(kHasPrimitive)]: false,&#10;        [Symbol(asyncId)]: 199,&#10;        [Symbol(triggerId)]: 197&#10;      },&#10;      [Symbol(kBuffer)]: null,&#10;      [Symbol(kBufferCb)]: null,&#10;      [Symbol(kBufferGen)]: null,&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kSetNoDelay)]: true,&#10;      [Symbol(kSetKeepAlive)]: true,&#10;      [Symbol(kSetKeepAliveInitialDelay)]: 1,&#10;      [Symbol(kBytesRead)]: 0,&#10;      [Symbol(kBytesWritten)]: 0&#10;    },&#10;    _header: 'POST /api/generate HTTP/1.1\r\n' +&#10;      'Accept: application/json, text/plain, */*\r\n' +&#10;      'Content-Type: application/json\r\n' +&#10;      'User-Agent: axios/1.7.7\r\n' +&#10;      'Content-Length: 612\r\n' +&#10;      'Accept-Encoding: gzip, compress, deflate, br\r\n' +&#10;      'Host: localhost:11434\r\n' +&#10;      'Connection: keep-alive\r\n' +&#10;      '\r\n',&#10;    _keepAliveTimeout: 0,&#10;    _onPendingData: [Function: nop],&#10;    agent: Agent {&#10;      _events: [Object: null prototype],&#10;      _eventsCount: 2,&#10;      _maxListeners: undefined,&#10;      defaultPort: 80,&#10;      protocol: 'http:',&#10;      options: [Object: null prototype],&#10;      requests: [Object: null prototype] {},&#10;      sockets: [Object: null prototype] {},&#10;      freeSockets: [Object: null prototype],&#10;      keepAliveMsecs: 1000,&#10;      keepAlive: true,&#10;      maxSockets: Infinity,&#10;      maxFreeSockets: 256,&#10;      scheduling: 'lifo',&#10;      maxTotalSockets: Infinity,&#10;      totalSocketCount: 1,&#10;      [Symbol(shapeMode)]: false,&#10;      [Symbol(kCapture)]: false&#10;    },&#10;    socketPath: undefined,&#10;    method: 'POST',&#10;    maxHeaderSize: undefined,&#10;    insecureHTTPParser: undefined,&#10;    joinDuplicateHeaders: undefined,&#10;    path: '/api/generate',&#10;    _ended: true,&#10;    res: IncomingMessage {&#10;      _events: [Object],&#10;      _readableState: [ReadableState],&#10;      _maxListeners: undefined,&#10;      socket: null,&#10;      httpVersionMajor: 1,&#10;      httpVersionMinor: 1,&#10;      httpVersion: '1.1',&#10;      complete: true,&#10;      rawHeaders: [Array],&#10;      rawTrailers: [],&#10;      joinDuplicateHeaders: undefined,&#10;      aborted: false,&#10;      upgrade: false,&#10;      url: '',&#10;      method: null,&#10;      statusCode: 500,&#10;      statusMessage: 'Internal Server Error',&#10;      client: [Socket],&#10;      _consuming: false,&#10;      _dumped: false,&#10;      req: [Circular *1],&#10;      _eventsCount: 4,&#10;      responseUrl: 'http://localhost:11434/api/generate',&#10;      redirects: [],&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kHeaders)]: [Object],&#10;      [Symbol(kHeadersCount)]: 6,&#10;      [Symbol(kTrailers)]: null,&#10;      [Symbol(kTrailersCount)]: 0&#10;    },&#10;    aborted: false,&#10;    timeoutCb: null,&#10;    upgradeOrConnect: false,&#10;    parser: null,&#10;    maxHeadersCount: null,&#10;    reusedSocket: false,&#10;    host: 'localhost',&#10;    protocol: 'http:',&#10;    _redirectable: Writable {&#10;      _events: [Object],&#10;      _writableState: [WritableState],&#10;      _maxListeners: undefined,&#10;      _options: [Object],&#10;      _ended: true,&#10;      _ending: true,&#10;      _redirectCount: 0,&#10;      _redirects: [],&#10;      _requestBodyLength: 612,&#10;      _requestBodyBuffers: [],&#10;      _eventsCount: 3,&#10;      _onNativeResponse: [Function (anonymous)],&#10;      _currentRequest: [Circular *1],&#10;      _currentUrl: 'http://localhost:11434/api/generate',&#10;      _timeout: null,&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false&#10;    },&#10;    [Symbol(shapeMode)]: false,&#10;    [Symbol(kCapture)]: false,&#10;    [Symbol(kBytesWritten)]: 0,&#10;    [Symbol(kNeedDrain)]: false,&#10;    [Symbol(corked)]: 0,&#10;    [Symbol(kOutHeaders)]: [Object: null prototype] {&#10;      accept: [Array],&#10;      'content-type': [Array],&#10;      'user-agent': [Array],&#10;      'content-length': [Array],&#10;      'accept-encoding': [Array],&#10;      host: [Array]&#10;    },&#10;    [Symbol(errored)]: null,&#10;    [Symbol(kHighWaterMark)]: 16384,&#10;    [Symbol(kRejectNonStandardBodyWrites)]: false,&#10;    [Symbol(kUniqueHeaders)]: null&#10;  },&#10;  response: {&#10;    status: 500,&#10;    statusText: 'Internal Server Error',&#10;    headers: Object [AxiosHeaders] {&#10;      'content-type': 'application/json; charset=utf-8',&#10;      date: 'Sat, 02 Nov 2024 20:54:05 GMT',&#10;      'content-length': '83'&#10;    },&#10;    config: {&#10;      transitional: [Object],&#10;      adapter: [Array],&#10;      transformRequest: [Array],&#10;      transformResponse: [Array],&#10;      timeout: 60000,&#10;      xsrfCookieName: 'XSRF-TOKEN',&#10;      xsrfHeaderName: 'X-XSRF-TOKEN',&#10;      maxContentLength: -1,&#10;      maxBodyLength: -1,&#10;      env: [Object],&#10;      validateStatus: [Function: validateStatus],&#10;      headers: [Object [AxiosHeaders]],&#10;      method: 'post',&#10;      url: 'http://localhost:11434/api/generate',&#10;      data: '{&quot;model&quot;:&quot;llama2&quot;,&quot;prompt&quot;:&quot;You are a NASA instructor providing clear, concise information about space exploration and science. \\n        Your responses should be:\\n        - Brief and to the point (2-3 sentences for general responses)\\n        - Professional and factual\\n        - Free of roleplay elements or emotive actions\\n        - Focused on accurate scientific information\\n        - Written in a clear, straightforward style\\n        \\n        If the user asks a specific technical question, you may provide more detailed information, but keep general responses concise.\\n\\nUser: hello&quot;,&quot;stream&quot;:false}'&#10;    },&#10;    request: &lt;ref *1&gt; ClientRequest {&#10;      _events: [Object: null prototype],&#10;      _eventsCount: 7,&#10;      _maxListeners: undefined,&#10;      outputData: [],&#10;      outputSize: 0,&#10;      writable: true,&#10;      destroyed: true,&#10;      _last: false,&#10;      chunkedEncoding: false,&#10;      shouldKeepAlive: true,&#10;      maxRequestsOnConnectionReached: false,&#10;      _defaultKeepAlive: true,&#10;      useChunkedEncodingByDefault: true,&#10;      sendDate: false,&#10;      _removedConnection: false,&#10;      _removedContLen: false,&#10;      _removedTE: false,&#10;      strictContentLength: false,&#10;      _contentLength: '612',&#10;      _hasBody: true,&#10;      _trailer: '',&#10;      finished: true,&#10;      _headerSent: true,&#10;      _closed: true,&#10;      socket: [Socket],&#10;      _header: 'POST /api/generate HTTP/1.1\r\n' +&#10;        'Accept: application/json, text/plain, */*\r\n' +&#10;        'Content-Type: application/json\r\n' +&#10;        'User-Agent: axios/1.7.7\r\n' +&#10;        'Content-Length: 612\r\n' +&#10;        'Accept-Encoding: gzip, compress, deflate, br\r\n' +&#10;        'Host: localhost:11434\r\n' +&#10;        'Connection: keep-alive\r\n' +&#10;        '\r\n',&#10;      _keepAliveTimeout: 0,&#10;      _onPendingData: [Function: nop],&#10;      agent: [Agent],&#10;      socketPath: undefined,&#10;      method: 'POST',&#10;      maxHeaderSize: undefined,&#10;      insecureHTTPParser: undefined,&#10;      joinDuplicateHeaders: undefined,&#10;      path: '/api/generate',&#10;      _ended: true,&#10;      res: [IncomingMessage],&#10;      aborted: false,&#10;      timeoutCb: null,&#10;      upgradeOrConnect: false,&#10;      parser: null,&#10;      maxHeadersCount: null,&#10;      reusedSocket: false,&#10;      host: 'localhost',&#10;      protocol: 'http:',&#10;      _redirectable: [Writable],&#10;      [Symbol(shapeMode)]: false,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kBytesWritten)]: 0,&#10;      [Symbol(kNeedDrain)]: false,&#10;      [Symbol(corked)]: 0,&#10;      [Symbol(kOutHeaders)]: [Object: null prototype],&#10;      [Symbol(errored)]: null,&#10;      [Symbol(kHighWaterMark)]: 16384,&#10;      [Symbol(kRejectNonStandardBodyWrites)]: false,&#10;      [Symbol(kUniqueHeaders)]: null&#10;    },&#10;    data: {&#10;      error: 'model requires more system memory (8.4 GiB) than is available (7.1 GiB)'&#10;    }&#10;  },&#10;  status: 500&#10;}&#10;Chat error: Error: Failed to get response from Ollama: Request failed with status code 500&#10;    at OllamaService.chat (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/ollama.js:106:19)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)&#10;    at async /home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js:60:26&#10;&#10;" />
        <option value="no utility files, they were needed before" />
        <option value="can you make sure llama2 process ends when the server stops?" />
        <option value="/usr/bin/node /home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js&#10;Initializing Ollama service...&#10;Default model llama2 not found, downloading...&#10;This may take several minutes...&#10;Model llama2 pull completed: &#10;pulling manifest &#10;pulling 8934d96d3f08... 100% ▕████████████████▏ 3.8 GB                         &#10;pulling 8c17c2ebb0ea... 100% ▕████████████████▏ 7.0 KB                         &#10;pulling 7c23fb36d801... 100% ▕████████████████▏ 4.8 KB                         &#10;pulling 2e0493f67d0c... 100% ▕████████████████▏   59 B                         &#10;pulling fa304d675061... 100% ▕████████████████▏   91 B                         &#10;pulling 42ba7f8a01dd... 100% ▕████████████████▏  557 B                         &#10;verifying sha256 digest &#10;writing manifest &#10;success &#10;&#10;Successfully initialized with model: llama2&#10;Ollama service initialization complete&#10;Server initialization complete, ready to handle requests&#10;Server is running on http://localhost:3000&#10;Ollama chat error: AxiosError: socket hang up&#10;    at AxiosError.from (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:876:14)&#10;    at RedirectableRequest.handleRequestError (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:3156:25)&#10;    at RedirectableRequest.emit (node:events:531:35)&#10;    at eventHandlers.&lt;computed&gt; (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/follow-redirects/index.js:49:24)&#10;    at ClientRequest.emit (node:events:519:28)&#10;    at emitErrorEvent (node:_http_client:108:11)&#10;    at Socket.socketOnEnd (node:_http_client:535:5)&#10;    at Socket.emit (node:events:531:35)&#10;    at endReadableNT (node:internal/streams/readable:1696:12)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)&#10;    at Axios.request (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:4287:41)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)&#10;    at async OllamaService.chat (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/ollama.js:87:30)&#10;    at async /home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js:61:26 {&#10;  code: 'ECONNRESET',&#10;  config: {&#10;    transitional: {&#10;      silentJSONParsing: true,&#10;      forcedJSONParsing: true,&#10;      clarifyTimeoutError: false&#10;    },&#10;    adapter: [ 'xhr', 'http', 'fetch' ],&#10;    transformRequest: [ [Function: transformRequest] ],&#10;    transformResponse: [ [Function: transformResponse] ],&#10;    timeout: 60000,&#10;    xsrfCookieName: 'XSRF-TOKEN',&#10;    xsrfHeaderName: 'X-XSRF-TOKEN',&#10;    maxContentLength: -1,&#10;    maxBodyLength: -1,&#10;    env: { FormData: [Function], Blob: [class Blob] },&#10;    validateStatus: [Function: validateStatus],&#10;    headers: Object [AxiosHeaders] {&#10;      Accept: 'application/json, text/plain, */*',&#10;      'Content-Type': 'application/json',&#10;      'User-Agent': 'axios/1.7.7',&#10;      'Content-Length': '612',&#10;      'Accept-Encoding': 'gzip, compress, deflate, br'&#10;    },&#10;    method: 'post',&#10;    url: 'http://localhost:11434/api/generate',&#10;    data: '{&quot;model&quot;:&quot;llama2&quot;,&quot;prompt&quot;:&quot;You are a NASA instructor providing clear, concise information about space exploration and science. \\n        Your responses should be:\\n        - Brief and to the point (2-3 sentences for general responses)\\n        - Professional and factual\\n        - Free of roleplay elements or emotive actions\\n        - Focused on accurate scientific information\\n        - Written in a clear, straightforward style\\n        \\n        If the user asks a specific technical question, you may provide more detailed information, but keep general responses concise.\\n\\nUser: hello&quot;,&quot;stream&quot;:false}'&#10;  },&#10;  request: &lt;ref *1&gt; Writable {&#10;    _events: {&#10;      close: undefined,&#10;      error: [Function: handleRequestError],&#10;      prefinish: undefined,&#10;      finish: undefined,&#10;      drain: undefined,&#10;      response: [Function: handleResponse],&#10;      socket: [Array],&#10;      timeout: undefined,&#10;      abort: undefined&#10;    },&#10;    _writableState: WritableState {&#10;      highWaterMark: 16384,&#10;      length: 0,&#10;      corked: 0,&#10;      onwrite: [Function: bound onwrite],&#10;      writelen: 0,&#10;      bufferedIndex: 0,&#10;      pendingcb: 0,&#10;      [Symbol(kState)]: 17580812,&#10;      [Symbol(kBufferedValue)]: null&#10;    },&#10;    _maxListeners: undefined,&#10;    _options: {&#10;      maxRedirects: 21,&#10;      maxBodyLength: Infinity,&#10;      protocol: 'http:',&#10;      path: '/api/generate',&#10;      method: 'POST',&#10;      headers: [Object: null prototype],&#10;      agents: [Object],&#10;      auth: undefined,&#10;      family: undefined,&#10;      beforeRedirect: [Function: dispatchBeforeRedirect],&#10;      beforeRedirects: [Object],&#10;      hostname: 'localhost',&#10;      port: '11434',&#10;      agent: undefined,&#10;      nativeProtocols: [Object],&#10;      pathname: '/api/generate'&#10;    },&#10;    _ended: true,&#10;    _ending: true,&#10;    _redirectCount: 0,&#10;    _redirects: [],&#10;    _requestBodyLength: 612,&#10;    _requestBodyBuffers: [ [Object] ],&#10;    _eventsCount: 3,&#10;    _onNativeResponse: [Function (anonymous)],&#10;    _currentRequest: ClientRequest {&#10;      _events: [Object: null prototype],&#10;      _eventsCount: 7,&#10;      _maxListeners: undefined,&#10;      outputData: [],&#10;      outputSize: 0,&#10;      writable: true,&#10;      destroyed: false,&#10;      _last: false,&#10;      chunkedEncoding: false,&#10;      shouldKeepAlive: true,&#10;      maxRequestsOnConnectionReached: false,&#10;      _defaultKeepAlive: true,&#10;      useChunkedEncodingByDefault: true,&#10;      sendDate: false,&#10;      _removedConnection: false,&#10;      _removedContLen: false,&#10;      _removedTE: false,&#10;      strictContentLength: false,&#10;      _contentLength: '612',&#10;      _hasBody: true,&#10;      _trailer: '',&#10;      finished: true,&#10;      _headerSent: true,&#10;      _closed: false,&#10;      socket: [Socket],&#10;      _header: 'POST /api/generate HTTP/1.1\r\n' +&#10;        'Accept: application/json, text/plain, */*\r\n' +&#10;        'Content-Type: application/json\r\n' +&#10;        'User-Agent: axios/1.7.7\r\n' +&#10;        'Content-Length: 612\r\n' +&#10;        'Accept-Encoding: gzip, compress, deflate, br\r\n' +&#10;        'Host: localhost:11434\r\n' +&#10;        'Connection: keep-alive\r\n' +&#10;        '\r\n',&#10;      _keepAliveTimeout: 0,&#10;      _onPendingData: [Function: nop],&#10;      agent: [Agent],&#10;      socketPath: undefined,&#10;      method: 'POST',&#10;      maxHeaderSize: undefined,&#10;      insecureHTTPParser: undefined,&#10;      joinDuplicateHeaders: undefined,&#10;      path: '/api/generate',&#10;      _ended: false,&#10;      res: null,&#10;      aborted: false,&#10;      timeoutCb: [Function: emitRequestTimeout],&#10;      upgradeOrConnect: false,&#10;      parser: null,&#10;      maxHeadersCount: null,&#10;      reusedSocket: true,&#10;      host: 'localhost',&#10;      protocol: 'http:',&#10;      _redirectable: [Circular *1],&#10;      [Symbol(shapeMode)]: false,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kBytesWritten)]: 0,&#10;      [Symbol(kNeedDrain)]: false,&#10;      [Symbol(corked)]: 0,&#10;      [Symbol(kOutHeaders)]: [Object: null prototype],&#10;      [Symbol(errored)]: null,&#10;      [Symbol(kHighWaterMark)]: 16384,&#10;      [Symbol(kRejectNonStandardBodyWrites)]: false,&#10;      [Symbol(kUniqueHeaders)]: null&#10;    },&#10;    _currentUrl: 'http://localhost:11434/api/generate',&#10;    _timeout: null,&#10;    [Symbol(shapeMode)]: true,&#10;    [Symbol(kCapture)]: false&#10;  },&#10;  cause: Error: socket hang up&#10;      at Socket.socketOnEnd (node:_http_client:535:25)&#10;      at Socket.emit (node:events:531:35)&#10;      at endReadableNT (node:internal/streams/readable:1696:12)&#10;      at process.processTicksAndRejections (node:internal/process/task_queues:82:21) {&#10;    code: 'ECONNRESET'&#10;  }&#10;}&#10;Chat error: Error: Failed to get response from Ollama: socket hang up&#10;    at OllamaService.chat (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/ollama.js:107:19)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)&#10;    at async /home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js:61:26&#10;&#10;" />
        <option value="no added files" />
        <option value="bin/node /home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js&#10;node:internal/modules/cjs/loader:1228&#10;  throw err;&#10;  ^&#10;&#10;Error: Cannot find module './utils/connectionManager'&#10;Require stack:&#10;- /home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js&#10;    at Module._resolveFilename (node:internal/modules/cjs/loader:1225:15)&#10;    at Module._load (node:internal/modules/cjs/loader:1051:27)&#10;    at Module.require (node:internal/modules/cjs/loader:1311:19)&#10;    at require (node:internal/modules/helpers:179:18)&#10;    at Object.&lt;anonymous&gt; (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js:9:27)&#10;    at Module._compile (node:internal/modules/cjs/loader:1469:14)&#10;    at Module._extensions..js (node:internal/modules/cjs/loader:1548:10)&#10;    at Module.load (node:internal/modules/cjs/loader:1288:32)&#10;    at Module._load (node:internal/modules/cjs/loader:1104:12)&#10;    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:174:12) {&#10;  code: 'MODULE_NOT_FOUND',&#10;  requireStack: [ '/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js' ]&#10;}&#10;&#10;Node.js v20.17.0&#10;&#10;Process finished with exit code 1&#10;&#10;" />
        <option value="no i just said no adding files" />
        <option value="no i said no new files, just use script.js ollma and server" />
        <option value="/usr/bin/node /home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js&#10;Initializing Ollama service...&#10;Default model llama2 not found, downloading...&#10;This may take several minutes...&#10;Model llama2 pull completed: &#10;pulling manifest &#10;pulling 8934d96d3f08... 100% ▕████████████████▏ 3.8 GB                         &#10;pulling 8c17c2ebb0ea... 100% ▕████████████████▏ 7.0 KB                         &#10;pulling 7c23fb36d801... 100% ▕████████████████▏ 4.8 KB                         &#10;pulling 2e0493f67d0c... 100% ▕████████████████▏   59 B                         &#10;pulling fa304d675061... 100% ▕████████████████▏   91 B                         &#10;pulling 42ba7f8a01dd... 100% ▕████████████████▏  557 B                         &#10;verifying sha256 digest &#10;writing manifest &#10;success &#10;&#10;Successfully initialized with model: llama2&#10;Ollama service initialization complete&#10;Server initialization complete, ready to handle requests&#10;Server is running on http://localhost:3000&#10;Ollama chat error: AxiosError: Request failed with status code 500&#10;    at settle (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:2019:12)&#10;    at IncomingMessage.handleStreamEnd (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:3135:11)&#10;    at IncomingMessage.emit (node:events:531:35)&#10;    at endReadableNT (node:internal/streams/readable:1696:12)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)&#10;    at Axios.request (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:4287:41)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)&#10;    at async OllamaService._attemptChat (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/ollama.js:109:30)&#10;    at async OllamaService.chat (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/ollama.js:91:34)&#10;    at async /home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js:74:26 {&#10;  code: 'ERR_BAD_RESPONSE',&#10;  config: {&#10;    transitional: {&#10;      silentJSONParsing: true,&#10;      forcedJSONParsing: true,&#10;      clarifyTimeoutError: false&#10;    },&#10;    adapter: [ 'xhr', 'http', 'fetch' ],&#10;    transformRequest: [ [Function: transformRequest] ],&#10;    transformResponse: [ [Function: transformResponse] ],&#10;    timeout: 0,&#10;    xsrfCookieName: 'XSRF-TOKEN',&#10;    xsrfHeaderName: 'X-XSRF-TOKEN',&#10;    maxContentLength: -1,&#10;    maxBodyLength: -1,&#10;    env: { FormData: [Function], Blob: [class Blob] },&#10;    validateStatus: [Function: validateStatus],&#10;    headers: Object [AxiosHeaders] {&#10;      Accept: 'application/json, text/plain, */*',&#10;      'Content-Type': 'application/json',&#10;      'User-Agent': 'axios/1.7.7',&#10;      'Content-Length': '999',&#10;      'Accept-Encoding': 'gzip, compress, deflate, br'&#10;    },&#10;    signal: AbortSignal { aborted: false },&#10;    method: 'post',&#10;    url: 'http://localhost:11434/api/generate',&#10;    data: `{&quot;model&quot;:&quot;llama2&quot;,&quot;prompt&quot;:&quot;You are NASA's Space Duck, an AI assistant specializing in space science and exploration. \\n        Your core responsibilities:\\n        - Provide accurate, NASA-sourced information about space, astronomy, and space exploration\\n        - Explain complex space concepts in simple, engaging terms\\n        - Share interesting facts about NASA missions, both historical and current\\n        - Encourage scientific thinking and space enthusiasm\\n        \\n        Response guidelines:\\n        - Keep answers concise (2-3 sentences for general responses)\\n        - Use precise scientific terminology with brief explanations\\n        - Include relevant NASA mission references when applicable\\n        - Maintain professional tone while being approachable\\n        - Focus on verified scientific facts\\n        \\n        If unsure about any information, acknowledge uncertainty and suggest referring to NASA's official resources.\\n\\nUser: hello&quot;,&quot;stream&quot;:false,&quot;context&quot;:[]}`&#10;  },&#10;  request: &lt;ref *1&gt; ClientRequest {&#10;    _events: [Object: null prototype] {&#10;      abort: [Function (anonymous)],&#10;      aborted: [Function (anonymous)],&#10;      connect: [Function (anonymous)],&#10;      error: [Function (anonymous)],&#10;      socket: [Function (anonymous)],&#10;      timeout: [Function (anonymous)],&#10;      finish: [Function: requestOnFinish]&#10;    },&#10;    _eventsCount: 7,&#10;    _maxListeners: undefined,&#10;    outputData: [],&#10;    outputSize: 0,&#10;    writable: true,&#10;    destroyed: true,&#10;    _last: false,&#10;    chunkedEncoding: false,&#10;    shouldKeepAlive: true,&#10;    maxRequestsOnConnectionReached: false,&#10;    _defaultKeepAlive: true,&#10;    useChunkedEncodingByDefault: true,&#10;    sendDate: false,&#10;    _removedConnection: false,&#10;    _removedContLen: false,&#10;    _removedTE: false,&#10;    strictContentLength: false,&#10;    _contentLength: '999',&#10;    _hasBody: true,&#10;    _trailer: '',&#10;    finished: true,&#10;    _headerSent: true,&#10;    _closed: true,&#10;    socket: Socket {&#10;      connecting: false,&#10;      _hadError: false,&#10;      _parent: null,&#10;      _host: 'localhost',&#10;      _closeAfterHandlingError: false,&#10;      _events: [Object],&#10;      _readableState: [ReadableState],&#10;      _writableState: [WritableState],&#10;      allowHalfOpen: false,&#10;      _maxListeners: undefined,&#10;      _eventsCount: 6,&#10;      _sockname: null,&#10;      _pendingData: null,&#10;      _pendingEncoding: '',&#10;      server: null,&#10;      _server: null,&#10;      timeout: 5000,&#10;      parser: null,&#10;      _httpMessage: null,&#10;      autoSelectFamilyAttemptedAddresses: [Array],&#10;      [Symbol(async_id_symbol)]: -1,&#10;      [Symbol(kHandle)]: [TCP],&#10;      [Symbol(lastWriteQueueSize)]: 0,&#10;      [Symbol(timeout)]: Timeout {&#10;        _idleTimeout: 5000,&#10;        _idlePrev: [TimersList],&#10;        _idleNext: [Timeout],&#10;        _idleStart: 7695,&#10;        _onTimeout: [Function: bound ],&#10;        _timerArgs: undefined,&#10;        _repeat: null,&#10;        _destroyed: false,&#10;        [Symbol(refed)]: false,&#10;        [Symbol(kHasPrimitive)]: false,&#10;        [Symbol(asyncId)]: 186,&#10;        [Symbol(triggerId)]: 184&#10;      },&#10;      [Symbol(kBuffer)]: null,&#10;      [Symbol(kBufferCb)]: null,&#10;      [Symbol(kBufferGen)]: null,&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kSetNoDelay)]: true,&#10;      [Symbol(kSetKeepAlive)]: true,&#10;      [Symbol(kSetKeepAliveInitialDelay)]: 1,&#10;      [Symbol(kBytesRead)]: 0,&#10;      [Symbol(kBytesWritten)]: 0&#10;    },&#10;    _header: 'POST /api/generate HTTP/1.1\r\n' +&#10;      'Accept: application/json, text/plain, */*\r\n' +&#10;      'Content-Type: application/json\r\n' +&#10;      'User-Agent: axios/1.7.7\r\n' +&#10;      'Content-Length: 999\r\n' +&#10;      'Accept-Encoding: gzip, compress, deflate, br\r\n' +&#10;      'Host: localhost:11434\r\n' +&#10;      'Connection: keep-alive\r\n' +&#10;      '\r\n',&#10;    _keepAliveTimeout: 0,&#10;    _onPendingData: [Function: nop],&#10;    agent: Agent {&#10;      _events: [Object: null prototype],&#10;      _eventsCount: 2,&#10;      _maxListeners: undefined,&#10;      defaultPort: 80,&#10;      protocol: 'http:',&#10;      options: [Object: null prototype],&#10;      requests: [Object: null prototype] {},&#10;      sockets: [Object: null prototype] {},&#10;      freeSockets: [Object: null prototype],&#10;      keepAliveMsecs: 1000,&#10;      keepAlive: true,&#10;      maxSockets: Infinity,&#10;      maxFreeSockets: 256,&#10;      scheduling: 'lifo',&#10;      maxTotalSockets: Infinity,&#10;      totalSocketCount: 1,&#10;      [Symbol(shapeMode)]: false,&#10;      [Symbol(kCapture)]: false&#10;    },&#10;    socketPath: undefined,&#10;    method: 'POST',&#10;    maxHeaderSize: undefined,&#10;    insecureHTTPParser: undefined,&#10;    joinDuplicateHeaders: undefined,&#10;    path: '/api/generate',&#10;    _ended: true,&#10;    res: IncomingMessage {&#10;      _events: [Object],&#10;      _readableState: [ReadableState],&#10;      _maxListeners: undefined,&#10;      socket: null,&#10;      httpVersionMajor: 1,&#10;      httpVersionMinor: 1,&#10;      httpVersion: '1.1',&#10;      complete: true,&#10;      rawHeaders: [Array],&#10;      rawTrailers: [],&#10;      joinDuplicateHeaders: undefined,&#10;      aborted: false,&#10;      upgrade: false,&#10;      url: '',&#10;      method: null,&#10;      statusCode: 500,&#10;      statusMessage: 'Internal Server Error',&#10;      client: [Socket],&#10;      _consuming: false,&#10;      _dumped: false,&#10;      req: [Circular *1],&#10;      _eventsCount: 4,&#10;      responseUrl: 'http://localhost:11434/api/generate',&#10;      redirects: [],&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kHeaders)]: [Object],&#10;      [Symbol(kHeadersCount)]: 6,&#10;      [Symbol(kTrailers)]: null,&#10;      [Symbol(kTrailersCount)]: 0&#10;    },&#10;    aborted: false,&#10;    timeoutCb: null,&#10;    upgradeOrConnect: false,&#10;    parser: null,&#10;    maxHeadersCount: null,&#10;    reusedSocket: false,&#10;    host: 'localhost',&#10;    protocol: 'http:',&#10;    _redirectable: Writable {&#10;      _events: [Object],&#10;      _writableState: [WritableState],&#10;      _maxListeners: undefined,&#10;      _options: [Object],&#10;      _ended: true,&#10;      _ending: true,&#10;      _redirectCount: 0,&#10;      _redirects: [],&#10;      _requestBodyLength: 999,&#10;      _requestBodyBuffers: [],&#10;      _eventsCount: 3,&#10;      _onNativeResponse: [Function (anonymous)],&#10;      _currentRequest: [Circular *1],&#10;      _currentUrl: 'http://localhost:11434/api/generate',&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false&#10;    },&#10;    [Symbol(shapeMode)]: false,&#10;    [Symbol(kCapture)]: false,&#10;    [Symbol(kBytesWritten)]: 0,&#10;    [Symbol(kNeedDrain)]: false,&#10;    [Symbol(corked)]: 0,&#10;    [Symbol(kOutHeaders)]: [Object: null prototype] {&#10;      accept: [Array],&#10;      'content-type': [Array],&#10;      'user-agent': [Array],&#10;      'content-length': [Array],&#10;      'accept-encoding': [Array],&#10;      host: [Array]&#10;    },&#10;    [Symbol(errored)]: null,&#10;    [Symbol(kHighWaterMark)]: 16384,&#10;    [Symbol(kRejectNonStandardBodyWrites)]: false,&#10;    [Symbol(kUniqueHeaders)]: null&#10;  },&#10;  response: {&#10;    status: 500,&#10;    statusText: 'Internal Server Error',&#10;    headers: Object [AxiosHeaders] {&#10;      'content-type': 'application/json; charset=utf-8',&#10;      date: 'Sat, 02 Nov 2024 21:11:57 GMT',&#10;      'content-length': '83'&#10;    },&#10;    config: {&#10;      transitional: [Object],&#10;      adapter: [Array],&#10;      transformRequest: [Array],&#10;      transformResponse: [Array],&#10;      timeout: 0,&#10;      xsrfCookieName: 'XSRF-TOKEN',&#10;      xsrfHeaderName: 'X-XSRF-TOKEN',&#10;      maxContentLength: -1,&#10;      maxBodyLength: -1,&#10;      env: [Object],&#10;      validateStatus: [Function: validateStatus],&#10;      headers: [Object [AxiosHeaders]],&#10;      signal: [AbortSignal],&#10;      method: 'post',&#10;      url: 'http://localhost:11434/api/generate',&#10;      data: `{&quot;model&quot;:&quot;llama2&quot;,&quot;prompt&quot;:&quot;You are NASA's Space Duck, an AI assistant specializing in space science and exploration. \\n        Your core responsibilities:\\n        - Provide accurate, NASA-sourced information about space, astronomy, and space exploration\\n        - Explain complex space concepts in simple, engaging terms\\n        - Share interesting facts about NASA missions, both historical and current\\n        - Encourage scientific thinking and space enthusiasm\\n        \\n        Response guidelines:\\n        - Keep answers concise (2-3 sentences for general responses)\\n        - Use precise scientific terminology with brief explanations\\n        - Include relevant NASA mission references when applicable\\n        - Maintain professional tone while being approachable\\n        - Focus on verified scientific facts\\n        \\n        If unsure about any information, acknowledge uncertainty and suggest referring to NASA's official resources.\\n\\nUser: hello&quot;,&quot;stream&quot;:false,&quot;context&quot;:[]}`&#10;    },&#10;    request: &lt;ref *1&gt; ClientRequest {&#10;      _events: [Object: null prototype],&#10;      _eventsCount: 7,&#10;      _maxListeners: undefined,&#10;      outputData: [],&#10;      outputSize: 0,&#10;      writable: true,&#10;      destroyed: true,&#10;      _last: false,&#10;      chunkedEncoding: false,&#10;      shouldKeepAlive: true,&#10;      maxRequestsOnConnectionReached: false,&#10;      _defaultKeepAlive: true,&#10;      useChunkedEncodingByDefault: true,&#10;      sendDate: false,&#10;      _removedConnection: false,&#10;      _removedContLen: false,&#10;      _removedTE: false,&#10;      strictContentLength: false,&#10;      _contentLength: '999',&#10;      _hasBody: true,&#10;      _trailer: '',&#10;      finished: true,&#10;      _headerSent: true,&#10;      _closed: true,&#10;      socket: [Socket],&#10;      _header: 'POST /api/generate HTTP/1.1\r\n' +&#10;        'Accept: application/json, text/plain, */*\r\n' +&#10;        'Content-Type: application/json\r\n' +&#10;        'User-Agent: axios/1.7.7\r\n' +&#10;        'Content-Length: 999\r\n' +&#10;        'Accept-Encoding: gzip, compress, deflate, br\r\n' +&#10;        'Host: localhost:11434\r\n' +&#10;        'Connection: keep-alive\r\n' +&#10;        '\r\n',&#10;      _keepAliveTimeout: 0,&#10;      _onPendingData: [Function: nop],&#10;      agent: [Agent],&#10;      socketPath: undefined,&#10;      method: 'POST',&#10;      maxHeaderSize: undefined,&#10;      insecureHTTPParser: undefined,&#10;      joinDuplicateHeaders: undefined,&#10;      path: '/api/generate',&#10;      _ended: true,&#10;      res: [IncomingMessage],&#10;      aborted: false,&#10;      timeoutCb: null,&#10;      upgradeOrConnect: false,&#10;      parser: null,&#10;      maxHeadersCount: null,&#10;      reusedSocket: false,&#10;      host: 'localhost',&#10;      protocol: 'http:',&#10;      _redirectable: [Writable],&#10;      [Symbol(shapeMode)]: false,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kBytesWritten)]: 0,&#10;      [Symbol(kNeedDrain)]: false,&#10;      [Symbol(corked)]: 0,&#10;      [Symbol(kOutHeaders)]: [Object: null prototype],&#10;      [Symbol(errored)]: null,&#10;      [Symbol(kHighWaterMark)]: 16384,&#10;      [Symbol(kRejectNonStandardBodyWrites)]: false,&#10;      [Symbol(kUniqueHeaders)]: null&#10;    },&#10;    data: {&#10;      error: 'model requires more system memory (8.4 GiB) than is available (7.0 GiB)'&#10;    }&#10;  },&#10;  status: 500&#10;}&#10;Retry attempt 1 after error: Failed to get response from Ollama: Request failed with status code 500&#10;Ollama chat error: AxiosError: Request failed with status code 500&#10;    at settle (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:2019:12)&#10;    at IncomingMessage.handleStreamEnd (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:3135:11)&#10;    at IncomingMessage.emit (node:events:531:35)&#10;    at endReadableNT (node:internal/streams/readable:1696:12)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)&#10;    at Axios.request (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:4287:41)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)&#10;    at async OllamaService._attemptChat (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/ollama.js:109:30)&#10;    at async OllamaService.chat (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/ollama.js:91:34)&#10;    at async /home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js:74:26 {&#10;  code: 'ERR_BAD_RESPONSE',&#10;  config: {&#10;    transitional: {&#10;      silentJSONParsing: true,&#10;      forcedJSONParsing: true,&#10;      clarifyTimeoutError: false&#10;    },&#10;    adapter: [ 'xhr', 'http', 'fetch' ],&#10;    transformRequest: [ [Function: transformRequest] ],&#10;    transformResponse: [ [Function: transformResponse] ],&#10;    timeout: 0,&#10;    xsrfCookieName: 'XSRF-TOKEN',&#10;    xsrfHeaderName: 'X-XSRF-TOKEN',&#10;    maxContentLength: -1,&#10;    maxBodyLength: -1,&#10;    env: { FormData: [Function], Blob: [class Blob] },&#10;    validateStatus: [Function: validateStatus],&#10;    headers: Object [AxiosHeaders] {&#10;      Accept: 'application/json, text/plain, */*',&#10;      'Content-Type': 'application/json',&#10;      'User-Agent': 'axios/1.7.7',&#10;      'Content-Length': '999',&#10;      'Accept-Encoding': 'gzip, compress, deflate, br'&#10;    },&#10;    signal: AbortSignal { aborted: false },&#10;    method: 'post',&#10;    url: 'http://localhost:11434/api/generate',&#10;    data: `{&quot;model&quot;:&quot;llama2&quot;,&quot;prompt&quot;:&quot;You are NASA's Space Duck, an AI assistant specializing in space science and exploration. \\n        Your core responsibilities:\\n        - Provide accurate, NASA-sourced information about space, astronomy, and space exploration\\n        - Explain complex space concepts in simple, engaging terms\\n        - Share interesting facts about NASA missions, both historical and current\\n        - Encourage scientific thinking and space enthusiasm\\n        \\n        Response guidelines:\\n        - Keep answers concise (2-3 sentences for general responses)\\n        - Use precise scientific terminology with brief explanations\\n        - Include relevant NASA mission references when applicable\\n        - Maintain professional tone while being approachable\\n        - Focus on verified scientific facts\\n        \\n        If unsure about any information, acknowledge uncertainty and suggest referring to NASA's official resources.\\n\\nUser: hello&quot;,&quot;stream&quot;:false,&quot;context&quot;:[]}`&#10;  },&#10;  request: &lt;ref *1&gt; ClientRequest {&#10;    _events: [Object: null prototype] {&#10;      abort: [Function (anonymous)],&#10;      aborted: [Function (anonymous)],&#10;      connect: [Function (anonymous)],&#10;      error: [Function (anonymous)],&#10;      socket: [Function (anonymous)],&#10;      timeout: [Function (anonymous)],&#10;      finish: [Function: requestOnFinish]&#10;    },&#10;    _eventsCount: 7,&#10;    _maxListeners: undefined,&#10;    outputData: [],&#10;    outputSize: 0,&#10;    writable: true,&#10;    destroyed: true,&#10;    _last: false,&#10;    chunkedEncoding: false,&#10;    shouldKeepAlive: true,&#10;    maxRequestsOnConnectionReached: false,&#10;    _defaultKeepAlive: true,&#10;    useChunkedEncodingByDefault: true,&#10;    sendDate: false,&#10;    _removedConnection: false,&#10;    _removedContLen: false,&#10;    _removedTE: false,&#10;    strictContentLength: false,&#10;    _contentLength: '999',&#10;    _hasBody: true,&#10;    _trailer: '',&#10;    finished: true,&#10;    _headerSent: true,&#10;    _closed: true,&#10;    socket: Socket {&#10;      connecting: false,&#10;      _hadError: false,&#10;      _parent: null,&#10;      _host: 'localhost',&#10;      _closeAfterHandlingError: false,&#10;      _events: [Object],&#10;      _readableState: [ReadableState],&#10;      _writableState: [WritableState],&#10;      allowHalfOpen: false,&#10;      _maxListeners: undefined,&#10;      _eventsCount: 6,&#10;      _sockname: null,&#10;      _pendingData: null,&#10;      _pendingEncoding: '',&#10;      server: null,&#10;      _server: null,&#10;      timeout: 5000,&#10;      parser: null,&#10;      _httpMessage: null,&#10;      autoSelectFamilyAttemptedAddresses: [Array],&#10;      [Symbol(async_id_symbol)]: -1,&#10;      [Symbol(kHandle)]: [TCP],&#10;      [Symbol(lastWriteQueueSize)]: 0,&#10;      [Symbol(timeout)]: Timeout {&#10;        _idleTimeout: 5000,&#10;        _idlePrev: [TimersList],&#10;        _idleNext: [Timeout],&#10;        _idleStart: 8727,&#10;        _onTimeout: [Function: bound ],&#10;        _timerArgs: undefined,&#10;        _repeat: null,&#10;        _destroyed: false,&#10;        [Symbol(refed)]: false,&#10;        [Symbol(kHasPrimitive)]: false,&#10;        [Symbol(asyncId)]: 206,&#10;        [Symbol(triggerId)]: 204&#10;      },&#10;      [Symbol(kBuffer)]: null,&#10;      [Symbol(kBufferCb)]: null,&#10;      [Symbol(kBufferGen)]: null,&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kSetNoDelay)]: true,&#10;      [Symbol(kSetKeepAlive)]: true,&#10;      [Symbol(kSetKeepAliveInitialDelay)]: 1,&#10;      [Symbol(kBytesRead)]: 0,&#10;      [Symbol(kBytesWritten)]: 0&#10;    },&#10;    _header: 'POST /api/generate HTTP/1.1\r\n' +&#10;      'Accept: application/json, text/plain, */*\r\n' +&#10;      'Content-Type: application/json\r\n' +&#10;      'User-Agent: axios/1.7.7\r\n' +&#10;      'Content-Length: 999\r\n' +&#10;      'Accept-Encoding: gzip, compress, deflate, br\r\n' +&#10;      'Host: localhost:11434\r\n' +&#10;      'Connection: keep-alive\r\n' +&#10;      '\r\n',&#10;    _keepAliveTimeout: 0,&#10;    _onPendingData: [Function: nop],&#10;    agent: Agent {&#10;      _events: [Object: null prototype],&#10;      _eventsCount: 2,&#10;      _maxListeners: undefined,&#10;      defaultPort: 80,&#10;      protocol: 'http:',&#10;      options: [Object: null prototype],&#10;      requests: [Object: null prototype] {},&#10;      sockets: [Object: null prototype] {},&#10;      freeSockets: [Object: null prototype],&#10;      keepAliveMsecs: 1000,&#10;      keepAlive: true,&#10;      maxSockets: Infinity,&#10;      maxFreeSockets: 256,&#10;      scheduling: 'lifo',&#10;      maxTotalSockets: Infinity,&#10;      totalSocketCount: 1,&#10;      [Symbol(shapeMode)]: false,&#10;      [Symbol(kCapture)]: false&#10;    },&#10;    socketPath: undefined,&#10;    method: 'POST',&#10;    maxHeaderSize: undefined,&#10;    insecureHTTPParser: undefined,&#10;    joinDuplicateHeaders: undefined,&#10;    path: '/api/generate',&#10;    _ended: true,&#10;    res: IncomingMessage {&#10;      _events: [Object],&#10;      _readableState: [ReadableState],&#10;      _maxListeners: undefined,&#10;      socket: null,&#10;      httpVersionMajor: 1,&#10;      httpVersionMinor: 1,&#10;      httpVersion: '1.1',&#10;      complete: true,&#10;      rawHeaders: [Array],&#10;      rawTrailers: [],&#10;      joinDuplicateHeaders: undefined,&#10;      aborted: false,&#10;      upgrade: false,&#10;      url: '',&#10;      method: null,&#10;      statusCode: 500,&#10;      statusMessage: 'Internal Server Error',&#10;      client: [Socket],&#10;      _consuming: false,&#10;      _dumped: false,&#10;      req: [Circular *1],&#10;      _eventsCount: 4,&#10;      responseUrl: 'http://localhost:11434/api/generate',&#10;      redirects: [],&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kHeaders)]: [Object],&#10;      [Symbol(kHeadersCount)]: 6,&#10;      [Symbol(kTrailers)]: null,&#10;      [Symbol(kTrailersCount)]: 0&#10;    },&#10;    aborted: false,&#10;    timeoutCb: null,&#10;    upgradeOrConnect: false,&#10;    parser: null,&#10;    maxHeadersCount: null,&#10;    reusedSocket: true,&#10;    host: 'localhost',&#10;    protocol: 'http:',&#10;    _redirectable: Writable {&#10;      _events: [Object],&#10;      _writableState: [WritableState],&#10;      _maxListeners: undefined,&#10;      _options: [Object],&#10;      _ended: true,&#10;      _ending: true,&#10;      _redirectCount: 0,&#10;      _redirects: [],&#10;      _requestBodyLength: 999,&#10;      _requestBodyBuffers: [],&#10;      _eventsCount: 3,&#10;      _onNativeResponse: [Function (anonymous)],&#10;      _currentRequest: [Circular *1],&#10;      _currentUrl: 'http://localhost:11434/api/generate',&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false&#10;    },&#10;    [Symbol(shapeMode)]: false,&#10;    [Symbol(kCapture)]: false,&#10;    [Symbol(kBytesWritten)]: 0,&#10;    [Symbol(kNeedDrain)]: false,&#10;    [Symbol(corked)]: 0,&#10;    [Symbol(kOutHeaders)]: [Object: null prototype] {&#10;      accept: [Array],&#10;      'content-type': [Array],&#10;      'user-agent': [Array],&#10;      'content-length': [Array],&#10;      'accept-encoding': [Array],&#10;      host: [Array]&#10;    },&#10;    [Symbol(errored)]: null,&#10;    [Symbol(kHighWaterMark)]: 16384,&#10;    [Symbol(kRejectNonStandardBodyWrites)]: false,&#10;    [Symbol(kUniqueHeaders)]: null&#10;  },&#10;  response: {&#10;    status: 500,&#10;    statusText: 'Internal Server Error',&#10;    headers: Object [AxiosHeaders] {&#10;      'content-type': 'application/json; charset=utf-8',&#10;      date: 'Sat, 02 Nov 2024 21:11:58 GMT',&#10;      'content-length': '83'&#10;    },&#10;    config: {&#10;      transitional: [Object],&#10;      adapter: [Array],&#10;      transformRequest: [Array],&#10;      transformResponse: [Array],&#10;      timeout: 0,&#10;      xsrfCookieName: 'XSRF-TOKEN',&#10;      xsrfHeaderName: 'X-XSRF-TOKEN',&#10;      maxContentLength: -1,&#10;      maxBodyLength: -1,&#10;      env: [Object],&#10;      validateStatus: [Function: validateStatus],&#10;      headers: [Object [AxiosHeaders]],&#10;      signal: [AbortSignal],&#10;      method: 'post',&#10;      url: 'http://localhost:11434/api/generate',&#10;      data: `{&quot;model&quot;:&quot;llama2&quot;,&quot;prompt&quot;:&quot;You are NASA's Space Duck, an AI assistant specializing in space science and exploration. \\n        Your core responsibilities:\\n        - Provide accurate, NASA-sourced information about space, astronomy, and space exploration\\n        - Explain complex space concepts in simple, engaging terms\\n        - Share interesting facts about NASA missions, both historical and current\\n        - Encourage scientific thinking and space enthusiasm\\n        \\n        Response guidelines:\\n        - Keep answers concise (2-3 sentences for general responses)\\n        - Use precise scientific terminology with brief explanations\\n        - Include relevant NASA mission references when applicable\\n        - Maintain professional tone while being approachable\\n        - Focus on verified scientific facts\\n        \\n        If unsure about any information, acknowledge uncertainty and suggest referring to NASA's official resources.\\n\\nUser: hello&quot;,&quot;stream&quot;:false,&quot;context&quot;:[]}`&#10;    },&#10;    request: &lt;ref *1&gt; ClientRequest {&#10;      _events: [Object: null prototype],&#10;      _eventsCount: 7,&#10;      _maxListeners: undefined,&#10;      outputData: [],&#10;      outputSize: 0,&#10;      writable: true,&#10;      destroyed: true,&#10;      _last: false,&#10;      chunkedEncoding: false,&#10;      shouldKeepAlive: true,&#10;      maxRequestsOnConnectionReached: false,&#10;      _defaultKeepAlive: true,&#10;      useChunkedEncodingByDefault: true,&#10;      sendDate: false,&#10;      _removedConnection: false,&#10;      _removedContLen: false,&#10;      _removedTE: false,&#10;      strictContentLength: false,&#10;      _contentLength: '999',&#10;      _hasBody: true,&#10;      _trailer: '',&#10;      finished: true,&#10;      _headerSent: true,&#10;      _closed: true,&#10;      socket: [Socket],&#10;      _header: 'POST /api/generate HTTP/1.1\r\n' +&#10;        'Accept: application/json, text/plain, */*\r\n' +&#10;        'Content-Type: application/json\r\n' +&#10;        'User-Agent: axios/1.7.7\r\n' +&#10;        'Content-Length: 999\r\n' +&#10;        'Accept-Encoding: gzip, compress, deflate, br\r\n' +&#10;        'Host: localhost:11434\r\n' +&#10;        'Connection: keep-alive\r\n' +&#10;        '\r\n',&#10;      _keepAliveTimeout: 0,&#10;      _onPendingData: [Function: nop],&#10;      agent: [Agent],&#10;      socketPath: undefined,&#10;      method: 'POST',&#10;      maxHeaderSize: undefined,&#10;      insecureHTTPParser: undefined,&#10;      joinDuplicateHeaders: undefined,&#10;      path: '/api/generate',&#10;      _ended: true,&#10;      res: [IncomingMessage],&#10;      aborted: false,&#10;      timeoutCb: null,&#10;      upgradeOrConnect: false,&#10;      parser: null,&#10;      maxHeadersCount: null,&#10;      reusedSocket: true,&#10;      host: 'localhost',&#10;      protocol: 'http:',&#10;      _redirectable: [Writable],&#10;      [Symbol(shapeMode)]: false,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kBytesWritten)]: 0,&#10;      [Symbol(kNeedDrain)]: false,&#10;      [Symbol(corked)]: 0,&#10;      [Symbol(kOutHeaders)]: [Object: null prototype],&#10;      [Symbol(errored)]: null,&#10;      [Symbol(kHighWaterMark)]: 16384,&#10;      [Symbol(kRejectNonStandardBodyWrites)]: false,&#10;      [Symbol(kUniqueHeaders)]: null&#10;    },&#10;    data: {&#10;      error: 'model requires more system memory (8.4 GiB) than is available (7.0 GiB)'&#10;    }&#10;  },&#10;  status: 500&#10;}&#10;Retry attempt 2 after error: Failed to get response from Ollama: Request failed with status code 500&#10;Ollama chat error: AxiosError: Request failed with status code 500&#10;    at settle (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:2019:12)&#10;    at IncomingMessage.handleStreamEnd (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:3135:11)&#10;    at IncomingMessage.emit (node:events:531:35)&#10;    at endReadableNT (node:internal/streams/readable:1696:12)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)&#10;    at Axios.request (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:4287:41)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)&#10;    at async OllamaService._attemptChat (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/ollama.js:109:30)&#10;    at async OllamaService.chat (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/ollama.js:91:34)&#10;    at async /home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js:74:26 {&#10;  code: 'ERR_BAD_RESPONSE',&#10;  config: {&#10;    transitional: {&#10;      silentJSONParsing: true,&#10;      forcedJSONParsing: true,&#10;      clarifyTimeoutError: false&#10;    },&#10;    adapter: [ 'xhr', 'http', 'fetch' ],&#10;    transformRequest: [ [Function: transformRequest] ],&#10;    transformResponse: [ [Function: transformResponse] ],&#10;    timeout: 0,&#10;    xsrfCookieName: 'XSRF-TOKEN',&#10;    xsrfHeaderName: 'X-XSRF-TOKEN',&#10;    maxContentLength: -1,&#10;    maxBodyLength: -1,&#10;    env: { FormData: [Function], Blob: [class Blob] },&#10;    validateStatus: [Function: validateStatus],&#10;    headers: Object [AxiosHeaders] {&#10;      Accept: 'application/json, text/plain, */*',&#10;      'Content-Type': 'application/json',&#10;      'User-Agent': 'axios/1.7.7',&#10;      'Content-Length': '999',&#10;      'Accept-Encoding': 'gzip, compress, deflate, br'&#10;    },&#10;    signal: AbortSignal { aborted: false },&#10;    method: 'post',&#10;    url: 'http://localhost:11434/api/generate',&#10;    data: `{&quot;model&quot;:&quot;llama2&quot;,&quot;prompt&quot;:&quot;You are NASA's Space Duck, an AI assistant specializing in space science and exploration. \\n        Your core responsibilities:\\n        - Provide accurate, NASA-sourced information about space, astronomy, and space exploration\\n        - Explain complex space concepts in simple, engaging terms\\n        - Share interesting facts about NASA missions, both historical and current\\n        - Encourage scientific thinking and space enthusiasm\\n        \\n        Response guidelines:\\n        - Keep answers concise (2-3 sentences for general responses)\\n        - Use precise scientific terminology with brief explanations\\n        - Include relevant NASA mission references when applicable\\n        - Maintain professional tone while being approachable\\n        - Focus on verified scientific facts\\n        \\n        If unsure about any information, acknowledge uncertainty and suggest referring to NASA's official resources.\\n\\nUser: hello&quot;,&quot;stream&quot;:false,&quot;context&quot;:[]}`&#10;  },&#10;  request: &lt;ref *1&gt; ClientRequest {&#10;    _events: [Object: null prototype] {&#10;      abort: [Function (anonymous)],&#10;      aborted: [Function (anonymous)],&#10;      connect: [Function (anonymous)],&#10;      error: [Function (anonymous)],&#10;      socket: [Function (anonymous)],&#10;      timeout: [Function (anonymous)],&#10;      finish: [Function: requestOnFinish]&#10;    },&#10;    _eventsCount: 7,&#10;    _maxListeners: undefined,&#10;    outputData: [],&#10;    outputSize: 0,&#10;    writable: true,&#10;    destroyed: true,&#10;    _last: false,&#10;    chunkedEncoding: false,&#10;    shouldKeepAlive: true,&#10;    maxRequestsOnConnectionReached: false,&#10;    _defaultKeepAlive: true,&#10;    useChunkedEncodingByDefault: true,&#10;    sendDate: false,&#10;    _removedConnection: false,&#10;    _removedContLen: false,&#10;    _removedTE: false,&#10;    strictContentLength: false,&#10;    _contentLength: '999',&#10;    _hasBody: true,&#10;    _trailer: '',&#10;    finished: true,&#10;    _headerSent: true,&#10;    _closed: true,&#10;    socket: Socket {&#10;      connecting: false,&#10;      _hadError: false,&#10;      _parent: null,&#10;      _host: 'localhost',&#10;      _closeAfterHandlingError: false,&#10;      _events: [Object],&#10;      _readableState: [ReadableState],&#10;      _writableState: [WritableState],&#10;      allowHalfOpen: false,&#10;      _maxListeners: undefined,&#10;      _eventsCount: 6,&#10;      _sockname: null,&#10;      _pendingData: null,&#10;      _pendingEncoding: '',&#10;      server: null,&#10;      _server: null,&#10;      timeout: 5000,&#10;      parser: null,&#10;      _httpMessage: null,&#10;      autoSelectFamilyAttemptedAddresses: [Array],&#10;      [Symbol(async_id_symbol)]: -1,&#10;      [Symbol(kHandle)]: [TCP],&#10;      [Symbol(lastWriteQueueSize)]: 0,&#10;      [Symbol(timeout)]: Timeout {&#10;        _idleTimeout: 5000,&#10;        _idlePrev: [TimersList],&#10;        _idleNext: [TimersList],&#10;        _idleStart: 10749,&#10;        _onTimeout: [Function: bound ],&#10;        _timerArgs: undefined,&#10;        _repeat: null,&#10;        _destroyed: false,&#10;        [Symbol(refed)]: false,&#10;        [Symbol(kHasPrimitive)]: false,&#10;        [Symbol(asyncId)]: 227,&#10;        [Symbol(triggerId)]: 225&#10;      },&#10;      [Symbol(kBuffer)]: null,&#10;      [Symbol(kBufferCb)]: null,&#10;      [Symbol(kBufferGen)]: null,&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kSetNoDelay)]: true,&#10;      [Symbol(kSetKeepAlive)]: true,&#10;      [Symbol(kSetKeepAliveInitialDelay)]: 1,&#10;      [Symbol(kBytesRead)]: 0,&#10;      [Symbol(kBytesWritten)]: 0&#10;    },&#10;    _header: 'POST /api/generate HTTP/1.1\r\n' +&#10;      'Accept: application/json, text/plain, */*\r\n' +&#10;      'Content-Type: application/json\r\n' +&#10;      'User-Agent: axios/1.7.7\r\n' +&#10;      'Content-Length: 999\r\n' +&#10;      'Accept-Encoding: gzip, compress, deflate, br\r\n' +&#10;      'Host: localhost:11434\r\n' +&#10;      'Connection: keep-alive\r\n' +&#10;      '\r\n',&#10;    _keepAliveTimeout: 0,&#10;    _onPendingData: [Function: nop],&#10;    agent: Agent {&#10;      _events: [Object: null prototype],&#10;      _eventsCount: 2,&#10;      _maxListeners: undefined,&#10;      defaultPort: 80,&#10;      protocol: 'http:',&#10;      options: [Object: null prototype],&#10;      requests: [Object: null prototype] {},&#10;      sockets: [Object: null prototype] {},&#10;      freeSockets: [Object: null prototype],&#10;      keepAliveMsecs: 1000,&#10;      keepAlive: true,&#10;      maxSockets: Infinity,&#10;      maxFreeSockets: 256,&#10;      scheduling: 'lifo',&#10;      maxTotalSockets: Infinity,&#10;      totalSocketCount: 1,&#10;      [Symbol(shapeMode)]: false,&#10;      [Symbol(kCapture)]: false&#10;    },&#10;    socketPath: undefined,&#10;    method: 'POST',&#10;    maxHeaderSize: undefined,&#10;    insecureHTTPParser: undefined,&#10;    joinDuplicateHeaders: undefined,&#10;    path: '/api/generate',&#10;    _ended: true,&#10;    res: IncomingMessage {&#10;      _events: [Object],&#10;      _readableState: [ReadableState],&#10;      _maxListeners: undefined,&#10;      socket: null,&#10;      httpVersionMajor: 1,&#10;      httpVersionMinor: 1,&#10;      httpVersion: '1.1',&#10;      complete: true,&#10;      rawHeaders: [Array],&#10;      rawTrailers: [],&#10;      joinDuplicateHeaders: undefined,&#10;      aborted: false,&#10;      upgrade: false,&#10;      url: '',&#10;      method: null,&#10;      statusCode: 500,&#10;      statusMessage: 'Internal Server Error',&#10;      client: [Socket],&#10;      _consuming: false,&#10;      _dumped: false,&#10;      req: [Circular *1],&#10;      _eventsCount: 4,&#10;      responseUrl: 'http://localhost:11434/api/generate',&#10;      redirects: [],&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kHeaders)]: [Object],&#10;      [Symbol(kHeadersCount)]: 6,&#10;      [Symbol(kTrailers)]: null,&#10;      [Symbol(kTrailersCount)]: 0&#10;    },&#10;    aborted: false,&#10;    timeoutCb: null,&#10;    upgradeOrConnect: false,&#10;    parser: null,&#10;    maxHeadersCount: null,&#10;    reusedSocket: true,&#10;    host: 'localhost',&#10;    protocol: 'http:',&#10;    _redirectable: Writable {&#10;      _events: [Object],&#10;      _writableState: [WritableState],&#10;      _maxListeners: undefined,&#10;      _options: [Object],&#10;      _ended: true,&#10;      _ending: true,&#10;      _redirectCount: 0,&#10;      _redirects: [],&#10;      _requestBodyLength: 999,&#10;      _requestBodyBuffers: [],&#10;      _eventsCount: 3,&#10;      _onNativeResponse: [Function (anonymous)],&#10;      _currentRequest: [Circular *1],&#10;      _currentUrl: 'http://localhost:11434/api/generate',&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false&#10;    },&#10;    [Symbol(shapeMode)]: false,&#10;    [Symbol(kCapture)]: false,&#10;    [Symbol(kBytesWritten)]: 0,&#10;    [Symbol(kNeedDrain)]: false,&#10;    [Symbol(corked)]: 0,&#10;    [Symbol(kOutHeaders)]: [Object: null prototype] {&#10;      accept: [Array],&#10;      'content-type': [Array],&#10;      'user-agent': [Array],&#10;      'content-length': [Array],&#10;      'accept-encoding': [Array],&#10;      host: [Array]&#10;    },&#10;    [Symbol(errored)]: null,&#10;    [Symbol(kHighWaterMark)]: 16384,&#10;    [Symbol(kRejectNonStandardBodyWrites)]: false,&#10;    [Symbol(kUniqueHeaders)]: null&#10;  },&#10;  response: {&#10;    status: 500,&#10;    statusText: 'Internal Server Error',&#10;    headers: Object [AxiosHeaders] {&#10;      'content-type': 'application/json; charset=utf-8',&#10;      date: 'Sat, 02 Nov 2024 21:12:00 GMT',&#10;      'content-length': '83'&#10;    },&#10;    config: {&#10;      transitional: [Object],&#10;      adapter: [Array],&#10;      transformRequest: [Array],&#10;      transformResponse: [Array],&#10;      timeout: 0,&#10;      xsrfCookieName: 'XSRF-TOKEN',&#10;      xsrfHeaderName: 'X-XSRF-TOKEN',&#10;      maxContentLength: -1,&#10;      maxBodyLength: -1,&#10;      env: [Object],&#10;      validateStatus: [Function: validateStatus],&#10;      headers: [Object [AxiosHeaders]],&#10;      signal: [AbortSignal],&#10;      method: 'post',&#10;      url: 'http://localhost:11434/api/generate',&#10;      data: `{&quot;model&quot;:&quot;llama2&quot;,&quot;prompt&quot;:&quot;You are NASA's Space Duck, an AI assistant specializing in space science and exploration. \\n        Your core responsibilities:\\n        - Provide accurate, NASA-sourced information about space, astronomy, and space exploration\\n        - Explain complex space concepts in simple, engaging terms\\n        - Share interesting facts about NASA missions, both historical and current\\n        - Encourage scientific thinking and space enthusiasm\\n        \\n        Response guidelines:\\n        - Keep answers concise (2-3 sentences for general responses)\\n        - Use precise scientific terminology with brief explanations\\n        - Include relevant NASA mission references when applicable\\n        - Maintain professional tone while being approachable\\n        - Focus on verified scientific facts\\n        \\n        If unsure about any information, acknowledge uncertainty and suggest referring to NASA's official resources.\\n\\nUser: hello&quot;,&quot;stream&quot;:false,&quot;context&quot;:[]}`&#10;    },&#10;    request: &lt;ref *1&gt; ClientRequest {&#10;      _events: [Object: null prototype],&#10;      _eventsCount: 7,&#10;      _maxListeners: undefined,&#10;      outputData: [],&#10;      outputSize: 0,&#10;      writable: true,&#10;      destroyed: true,&#10;      _last: false,&#10;      chunkedEncoding: false,&#10;      shouldKeepAlive: true,&#10;      maxRequestsOnConnectionReached: false,&#10;      _defaultKeepAlive: true,&#10;      useChunkedEncodingByDefault: true,&#10;      sendDate: false,&#10;      _removedConnection: false,&#10;      _removedContLen: false,&#10;      _removedTE: false,&#10;      strictContentLength: false,&#10;      _contentLength: '999',&#10;      _hasBody: true,&#10;      _trailer: '',&#10;      finished: true,&#10;      _headerSent: true,&#10;      _closed: true,&#10;      socket: [Socket],&#10;      _header: 'POST /api/generate HTTP/1.1\r\n' +&#10;        'Accept: application/json, text/plain, */*\r\n' +&#10;        'Content-Type: application/json\r\n' +&#10;        'User-Agent: axios/1.7.7\r\n' +&#10;        'Content-Length: 999\r\n' +&#10;        'Accept-Encoding: gzip, compress, deflate, br\r\n' +&#10;        'Host: localhost:11434\r\n' +&#10;        'Connection: keep-alive\r\n' +&#10;        '\r\n',&#10;      _keepAliveTimeout: 0,&#10;      _onPendingData: [Function: nop],&#10;      agent: [Agent],&#10;      socketPath: undefined,&#10;      method: 'POST',&#10;      maxHeaderSize: undefined,&#10;      insecureHTTPParser: undefined,&#10;      joinDuplicateHeaders: undefined,&#10;      path: '/api/generate',&#10;      _ended: true,&#10;      res: [IncomingMessage],&#10;      aborted: false,&#10;      timeoutCb: null,&#10;      upgradeOrConnect: false,&#10;      parser: null,&#10;      maxHeadersCount: null,&#10;      reusedSocket: true,&#10;      host: 'localhost',&#10;      protocol: 'http:',&#10;      _redirectable: [Writable],&#10;      [Symbol(shapeMode)]: false,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kBytesWritten)]: 0,&#10;      [Symbol(kNeedDrain)]: false,&#10;      [Symbol(corked)]: 0,&#10;      [Symbol(kOutHeaders)]: [Object: null prototype],&#10;      [Symbol(errored)]: null,&#10;      [Symbol(kHighWaterMark)]: 16384,&#10;      [Symbol(kRejectNonStandardBodyWrites)]: false,&#10;      [Symbol(kUniqueHeaders)]: null&#10;    },&#10;    data: {&#10;      error: 'model requires more system memory (8.4 GiB) than is available (7.1 GiB)'&#10;    }&#10;  },&#10;  status: 500&#10;}&#10;Chat error: Error: Failed to get response from Ollama: Request failed with status code 500&#10;    at OllamaService._attemptChat (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/ollama.js:135:19)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)&#10;    at async OllamaService.chat (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/ollama.js:91:34)&#10;    at async /home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js:74:26&#10;Ollama chat error: AxiosError: Request failed with status code 500&#10;    at settle (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:2019:12)&#10;    at IncomingMessage.handleStreamEnd (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:3135:11)&#10;    at IncomingMessage.emit (node:events:531:35)&#10;    at endReadableNT (node:internal/streams/readable:1696:12)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)&#10;    at Axios.request (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:4287:41)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)&#10;    at async OllamaService._attemptChat (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/ollama.js:109:30)&#10;    at async OllamaService.chat (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/ollama.js:91:34)&#10;    at async /home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js:74:26 {&#10;  code: 'ERR_BAD_RESPONSE',&#10;  config: {&#10;    transitional: {&#10;      silentJSONParsing: true,&#10;      forcedJSONParsing: true,&#10;      clarifyTimeoutError: false&#10;    },&#10;    adapter: [ 'xhr', 'http', 'fetch' ],&#10;    transformRequest: [ [Function: transformRequest] ],&#10;    transformResponse: [ [Function: transformResponse] ],&#10;    timeout: 0,&#10;    xsrfCookieName: 'XSRF-TOKEN',&#10;    xsrfHeaderName: 'X-XSRF-TOKEN',&#10;    maxContentLength: -1,&#10;    maxBodyLength: -1,&#10;    env: { FormData: [Function], Blob: [class Blob] },&#10;    validateStatus: [Function: validateStatus],&#10;    headers: Object [AxiosHeaders] {&#10;      Accept: 'application/json, text/plain, */*',&#10;      'Content-Type': 'application/json',&#10;      'User-Agent': 'axios/1.7.7',&#10;      'Content-Length': '999',&#10;      'Accept-Encoding': 'gzip, compress, deflate, br'&#10;    },&#10;    signal: AbortSignal { aborted: false },&#10;    method: 'post',&#10;    url: 'http://localhost:11434/api/generate',&#10;    data: `{&quot;model&quot;:&quot;llama2&quot;,&quot;prompt&quot;:&quot;You are NASA's Space Duck, an AI assistant specializing in space science and exploration. \\n        Your core responsibilities:\\n        - Provide accurate, NASA-sourced information about space, astronomy, and space exploration\\n        - Explain complex space concepts in simple, engaging terms\\n        - Share interesting facts about NASA missions, both historical and current\\n        - Encourage scientific thinking and space enthusiasm\\n        \\n        Response guidelines:\\n        - Keep answers concise (2-3 sentences for general responses)\\n        - Use precise scientific terminology with brief explanations\\n        - Include relevant NASA mission references when applicable\\n        - Maintain professional tone while being approachable\\n        - Focus on verified scientific facts\\n        \\n        If unsure about any information, acknowledge uncertainty and suggest referring to NASA's official resources.\\n\\nUser: hello&quot;,&quot;stream&quot;:false,&quot;context&quot;:[]}`&#10;  },&#10;  request: &lt;ref *1&gt; ClientRequest {&#10;    _events: [Object: null prototype] {&#10;      abort: [Function (anonymous)],&#10;      aborted: [Function (anonymous)],&#10;      connect: [Function (anonymous)],&#10;      error: [Function (anonymous)],&#10;      socket: [Function (anonymous)],&#10;      timeout: [Function (anonymous)],&#10;      finish: [Function: requestOnFinish]&#10;    },&#10;    _eventsCount: 7,&#10;    _maxListeners: undefined,&#10;    outputData: [],&#10;    outputSize: 0,&#10;    writable: true,&#10;    destroyed: true,&#10;    _last: false,&#10;    chunkedEncoding: false,&#10;    shouldKeepAlive: true,&#10;    maxRequestsOnConnectionReached: false,&#10;    _defaultKeepAlive: true,&#10;    useChunkedEncodingByDefault: true,&#10;    sendDate: false,&#10;    _removedConnection: false,&#10;    _removedContLen: false,&#10;    _removedTE: false,&#10;    strictContentLength: false,&#10;    _contentLength: '999',&#10;    _hasBody: true,&#10;    _trailer: '',&#10;    finished: true,&#10;    _headerSent: true,&#10;    _closed: true,&#10;    socket: Socket {&#10;      connecting: false,&#10;      _hadError: false,&#10;      _parent: null,&#10;      _host: 'localhost',&#10;      _closeAfterHandlingError: false,&#10;      _events: [Object],&#10;      _readableState: [ReadableState],&#10;      _writableState: [WritableState],&#10;      allowHalfOpen: false,&#10;      _maxListeners: undefined,&#10;      _eventsCount: 6,&#10;      _sockname: null,&#10;      _pendingData: null,&#10;      _pendingEncoding: '',&#10;      server: null,&#10;      _server: null,&#10;      timeout: 5000,&#10;      parser: null,&#10;      _httpMessage: null,&#10;      autoSelectFamilyAttemptedAddresses: [Array],&#10;      [Symbol(async_id_symbol)]: -1,&#10;      [Symbol(kHandle)]: [TCP],&#10;      [Symbol(lastWriteQueueSize)]: 0,&#10;      [Symbol(timeout)]: Timeout {&#10;        _idleTimeout: 5000,&#10;        _idlePrev: [TimersList],&#10;        _idleNext: [TimersList],&#10;        _idleStart: 19579,&#10;        _onTimeout: [Function: bound ],&#10;        _timerArgs: undefined,&#10;        _repeat: null,&#10;        _destroyed: false,&#10;        [Symbol(refed)]: false,&#10;        [Symbol(kHasPrimitive)]: false,&#10;        [Symbol(asyncId)]: 265,&#10;        [Symbol(triggerId)]: 263&#10;      },&#10;      [Symbol(kBuffer)]: null,&#10;      [Symbol(kBufferCb)]: null,&#10;      [Symbol(kBufferGen)]: null,&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kSetNoDelay)]: true,&#10;      [Symbol(kSetKeepAlive)]: true,&#10;      [Symbol(kSetKeepAliveInitialDelay)]: 1,&#10;      [Symbol(kBytesRead)]: 0,&#10;      [Symbol(kBytesWritten)]: 0&#10;    },&#10;    _header: 'POST /api/generate HTTP/1.1\r\n' +&#10;      'Accept: application/json, text/plain, */*\r\n' +&#10;      'Content-Type: application/json\r\n' +&#10;      'User-Agent: axios/1.7.7\r\n' +&#10;      'Content-Length: 999\r\n' +&#10;      'Accept-Encoding: gzip, compress, deflate, br\r\n' +&#10;      'Host: localhost:11434\r\n' +&#10;      'Connection: keep-alive\r\n' +&#10;      '\r\n',&#10;    _keepAliveTimeout: 0,&#10;    _onPendingData: [Function: nop],&#10;    agent: Agent {&#10;      _events: [Object: null prototype],&#10;      _eventsCount: 2,&#10;      _maxListeners: undefined,&#10;      defaultPort: 80,&#10;      protocol: 'http:',&#10;      options: [Object: null prototype],&#10;      requests: [Object: null prototype] {},&#10;      sockets: [Object: null prototype] {},&#10;      freeSockets: [Object: null prototype],&#10;      keepAliveMsecs: 1000,&#10;      keepAlive: true,&#10;      maxSockets: Infinity,&#10;      maxFreeSockets: 256,&#10;      scheduling: 'lifo',&#10;      maxTotalSockets: Infinity,&#10;      totalSocketCount: 1,&#10;      [Symbol(shapeMode)]: false,&#10;      [Symbol(kCapture)]: false&#10;    },&#10;    socketPath: undefined,&#10;    method: 'POST',&#10;    maxHeaderSize: undefined,&#10;    insecureHTTPParser: undefined,&#10;    joinDuplicateHeaders: undefined,&#10;    path: '/api/generate',&#10;    _ended: true,&#10;    res: IncomingMessage {&#10;      _events: [Object],&#10;      _readableState: [ReadableState],&#10;      _maxListeners: undefined,&#10;      socket: null,&#10;      httpVersionMajor: 1,&#10;      httpVersionMinor: 1,&#10;      httpVersion: '1.1',&#10;      complete: true,&#10;      rawHeaders: [Array],&#10;      rawTrailers: [],&#10;      joinDuplicateHeaders: undefined,&#10;      aborted: false,&#10;      upgrade: false,&#10;      url: '',&#10;      method: null,&#10;      statusCode: 500,&#10;      statusMessage: 'Internal Server Error',&#10;      client: [Socket],&#10;      _consuming: false,&#10;      _dumped: false,&#10;      req: [Circular *1],&#10;      _eventsCount: 4,&#10;      responseUrl: 'http://localhost:11434/api/generate',&#10;      redirects: [],&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kHeaders)]: [Object],&#10;      [Symbol(kHeadersCount)]: 6,&#10;      [Symbol(kTrailers)]: null,&#10;      [Symbol(kTrailersCount)]: 0&#10;    },&#10;    aborted: false,&#10;    timeoutCb: null,&#10;    upgradeOrConnect: false,&#10;    parser: null,&#10;    maxHeadersCount: null,&#10;    reusedSocket: false,&#10;    host: 'localhost',&#10;    protocol: 'http:',&#10;    _redirectable: Writable {&#10;      _events: [Object],&#10;      _writableState: [WritableState],&#10;      _maxListeners: undefined,&#10;      _options: [Object],&#10;      _ended: true,&#10;      _ending: true,&#10;      _redirectCount: 0,&#10;      _redirects: [],&#10;      _requestBodyLength: 999,&#10;      _requestBodyBuffers: [],&#10;      _eventsCount: 3,&#10;      _onNativeResponse: [Function (anonymous)],&#10;      _currentRequest: [Circular *1],&#10;      _currentUrl: 'http://localhost:11434/api/generate',&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false&#10;    },&#10;    [Symbol(shapeMode)]: false,&#10;    [Symbol(kCapture)]: false,&#10;    [Symbol(kBytesWritten)]: 0,&#10;    [Symbol(kNeedDrain)]: false,&#10;    [Symbol(corked)]: 0,&#10;    [Symbol(kOutHeaders)]: [Object: null prototype] {&#10;      accept: [Array],&#10;      'content-type': [Array],&#10;      'user-agent': [Array],&#10;      'content-length': [Array],&#10;      'accept-encoding': [Array],&#10;      host: [Array]&#10;    },&#10;    [Symbol(errored)]: null,&#10;    [Symbol(kHighWaterMark)]: 16384,&#10;    [Symbol(kRejectNonStandardBodyWrites)]: false,&#10;    [Symbol(kUniqueHeaders)]: null&#10;  },&#10;  response: {&#10;    status: 500,&#10;    statusText: 'Internal Server Error',&#10;    headers: Object [AxiosHeaders] {&#10;      'content-type': 'application/json; charset=utf-8',&#10;      date: 'Sat, 02 Nov 2024 21:12:09 GMT',&#10;      'content-length': '83'&#10;    },&#10;    config: {&#10;      transitional: [Object],&#10;      adapter: [Array],&#10;      transformRequest: [Array],&#10;      transformResponse: [Array],&#10;      timeout: 0,&#10;      xsrfCookieName: 'XSRF-TOKEN',&#10;      xsrfHeaderName: 'X-XSRF-TOKEN',&#10;      maxContentLength: -1,&#10;      maxBodyLength: -1,&#10;      env: [Object],&#10;      validateStatus: [Function: validateStatus],&#10;      headers: [Object [AxiosHeaders]],&#10;      signal: [AbortSignal],&#10;      method: 'post',&#10;      url: 'http://localhost:11434/api/generate',&#10;      data: `{&quot;model&quot;:&quot;llama2&quot;,&quot;prompt&quot;:&quot;You are NASA's Space Duck, an AI assistant specializing in space science and exploration. \\n        Your core responsibilities:\\n        - Provide accurate, NASA-sourced information about space, astronomy, and space exploration\\n        - Explain complex space concepts in simple, engaging terms\\n        - Share interesting facts about NASA missions, both historical and current\\n        - Encourage scientific thinking and space enthusiasm\\n        \\n        Response guidelines:\\n        - Keep answers concise (2-3 sentences for general responses)\\n        - Use precise scientific terminology with brief explanations\\n        - Include relevant NASA mission references when applicable\\n        - Maintain professional tone while being approachable\\n        - Focus on verified scientific facts\\n        \\n        If unsure about any information, acknowledge uncertainty and suggest referring to NASA's official resources.\\n\\nUser: hello&quot;,&quot;stream&quot;:false,&quot;context&quot;:[]}`&#10;    },&#10;    request: &lt;ref *1&gt; ClientRequest {&#10;      _events: [Object: null prototype],&#10;      _eventsCount: 7,&#10;      _maxListeners: undefined,&#10;      outputData: [],&#10;      outputSize: 0,&#10;      writable: true,&#10;      destroyed: true,&#10;      _last: false,&#10;      chunkedEncoding: false,&#10;      shouldKeepAlive: true,&#10;      maxRequestsOnConnectionReached: false,&#10;      _defaultKeepAlive: true,&#10;      useChunkedEncodingByDefault: true,&#10;      sendDate: false,&#10;      _removedConnection: false,&#10;      _removedContLen: false,&#10;      _removedTE: false,&#10;      strictContentLength: false,&#10;      _contentLength: '999',&#10;      _hasBody: true,&#10;      _trailer: '',&#10;      finished: true,&#10;      _headerSent: true,&#10;      _closed: true,&#10;      socket: [Socket],&#10;      _header: 'POST /api/generate HTTP/1.1\r\n' +&#10;        'Accept: application/json, text/plain, */*\r\n' +&#10;        'Content-Type: application/json\r\n' +&#10;        'User-Agent: axios/1.7.7\r\n' +&#10;        'Content-Length: 999\r\n' +&#10;        'Accept-Encoding: gzip, compress, deflate, br\r\n' +&#10;        'Host: localhost:11434\r\n' +&#10;        'Connection: keep-alive\r\n' +&#10;        '\r\n',&#10;      _keepAliveTimeout: 0,&#10;      _onPendingData: [Function: nop],&#10;      agent: [Agent],&#10;      socketPath: undefined,&#10;      method: 'POST',&#10;      maxHeaderSize: undefined,&#10;      insecureHTTPParser: undefined,&#10;      joinDuplicateHeaders: undefined,&#10;      path: '/api/generate',&#10;      _ended: true,&#10;      res: [IncomingMessage],&#10;      aborted: false,&#10;      timeoutCb: null,&#10;      upgradeOrConnect: false,&#10;      parser: null,&#10;      maxHeadersCount: null,&#10;      reusedSocket: false,&#10;      host: 'localhost',&#10;      protocol: 'http:',&#10;      _redirectable: [Writable],&#10;      [Symbol(shapeMode)]: false,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kBytesWritten)]: 0,&#10;      [Symbol(kNeedDrain)]: false,&#10;      [Symbol(corked)]: 0,&#10;      [Symbol(kOutHeaders)]: [Object: null prototype],&#10;      [Symbol(errored)]: null,&#10;      [Symbol(kHighWaterMark)]: 16384,&#10;      [Symbol(kRejectNonStandardBodyWrites)]: false,&#10;      [Symbol(kUniqueHeaders)]: null&#10;    },&#10;    data: {&#10;      error: 'model requires more system memory (8.4 GiB) than is available (7.1 GiB)'&#10;    }&#10;  },&#10;  status: 500&#10;}&#10;Retry attempt 1 after error: Failed to get response from Ollama: Request failed with status code 500&#10;Ollama chat error: AxiosError: Request failed with status code 500&#10;    at settle (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:2019:12)&#10;    at IncomingMessage.handleStreamEnd (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:3135:11)&#10;    at IncomingMessage.emit (node:events:531:35)&#10;    at endReadableNT (node:internal/streams/readable:1696:12)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)&#10;    at Axios.request (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:4287:41)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)&#10;    at async OllamaService._attemptChat (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/ollama.js:109:30)&#10;    at async OllamaService.chat (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/ollama.js:91:34)&#10;    at async /home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js:74:26 {&#10;  code: 'ERR_BAD_RESPONSE',&#10;  config: {&#10;    transitional: {&#10;      silentJSONParsing: true,&#10;      forcedJSONParsing: true,&#10;      clarifyTimeoutError: false&#10;    },&#10;    adapter: [ 'xhr', 'http', 'fetch' ],&#10;    transformRequest: [ [Function: transformRequest] ],&#10;    transformResponse: [ [Function: transformResponse] ],&#10;    timeout: 0,&#10;    xsrfCookieName: 'XSRF-TOKEN',&#10;    xsrfHeaderName: 'X-XSRF-TOKEN',&#10;    maxContentLength: -1,&#10;    maxBodyLength: -1,&#10;    env: { FormData: [Function], Blob: [class Blob] },&#10;    validateStatus: [Function: validateStatus],&#10;    headers: Object [AxiosHeaders] {&#10;      Accept: 'application/json, text/plain, */*',&#10;      'Content-Type': 'application/json',&#10;      'User-Agent': 'axios/1.7.7',&#10;      'Content-Length': '999',&#10;      'Accept-Encoding': 'gzip, compress, deflate, br'&#10;    },&#10;    signal: AbortSignal { aborted: false },&#10;    method: 'post',&#10;    url: 'http://localhost:11434/api/generate',&#10;    data: `{&quot;model&quot;:&quot;llama2&quot;,&quot;prompt&quot;:&quot;You are NASA's Space Duck, an AI assistant specializing in space science and exploration. \\n        Your core responsibilities:\\n        - Provide accurate, NASA-sourced information about space, astronomy, and space exploration\\n        - Explain complex space concepts in simple, engaging terms\\n        - Share interesting facts about NASA missions, both historical and current\\n        - Encourage scientific thinking and space enthusiasm\\n        \\n        Response guidelines:\\n        - Keep answers concise (2-3 sentences for general responses)\\n        - Use precise scientific terminology with brief explanations\\n        - Include relevant NASA mission references when applicable\\n        - Maintain professional tone while being approachable\\n        - Focus on verified scientific facts\\n        \\n        If unsure about any information, acknowledge uncertainty and suggest referring to NASA's official resources.\\n\\nUser: hello&quot;,&quot;stream&quot;:false,&quot;context&quot;:[]}`&#10;  },&#10;  request: &lt;ref *1&gt; ClientRequest {&#10;    _events: [Object: null prototype] {&#10;      abort: [Function (anonymous)],&#10;      aborted: [Function (anonymous)],&#10;      connect: [Function (anonymous)],&#10;      error: [Function (anonymous)],&#10;      socket: [Function (anonymous)],&#10;      timeout: [Function (anonymous)],&#10;      finish: [Function: requestOnFinish]&#10;    },&#10;    _eventsCount: 7,&#10;    _maxListeners: undefined,&#10;    outputData: [],&#10;    outputSize: 0,&#10;    writable: true,&#10;    destroyed: true,&#10;    _last: false,&#10;    chunkedEncoding: false,&#10;    shouldKeepAlive: true,&#10;    maxRequestsOnConnectionReached: false,&#10;    _defaultKeepAlive: true,&#10;    useChunkedEncodingByDefault: true,&#10;    sendDate: false,&#10;    _removedConnection: false,&#10;    _removedContLen: false,&#10;    _removedTE: false,&#10;    strictContentLength: false,&#10;    _contentLength: '999',&#10;    _hasBody: true,&#10;    _trailer: '',&#10;    finished: true,&#10;    _headerSent: true,&#10;    _closed: true,&#10;    socket: Socket {&#10;      connecting: false,&#10;      _hadError: false,&#10;      _parent: null,&#10;      _host: 'localhost',&#10;      _closeAfterHandlingError: false,&#10;      _events: [Object],&#10;      _readableState: [ReadableState],&#10;      _writableState: [WritableState],&#10;      allowHalfOpen: false,&#10;      _maxListeners: undefined,&#10;      _eventsCount: 6,&#10;      _sockname: null,&#10;      _pendingData: null,&#10;      _pendingEncoding: '',&#10;      server: null,&#10;      _server: null,&#10;      timeout: 5000,&#10;      parser: null,&#10;      _httpMessage: null,&#10;      autoSelectFamilyAttemptedAddresses: [Array],&#10;      [Symbol(async_id_symbol)]: -1,&#10;      [Symbol(kHandle)]: [TCP],&#10;      [Symbol(lastWriteQueueSize)]: 0,&#10;      [Symbol(timeout)]: Timeout {&#10;        _idleTimeout: 5000,&#10;        _idlePrev: [TimersList],&#10;        _idleNext: [TimersList],&#10;        _idleStart: 20606,&#10;        _onTimeout: [Function: bound ],&#10;        _timerArgs: undefined,&#10;        _repeat: null,&#10;        _destroyed: false,&#10;        [Symbol(refed)]: false,&#10;        [Symbol(kHasPrimitive)]: false,&#10;        [Symbol(asyncId)]: 285,&#10;        [Symbol(triggerId)]: 283&#10;      },&#10;      [Symbol(kBuffer)]: null,&#10;      [Symbol(kBufferCb)]: null,&#10;      [Symbol(kBufferGen)]: null,&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kSetNoDelay)]: true,&#10;      [Symbol(kSetKeepAlive)]: true,&#10;      [Symbol(kSetKeepAliveInitialDelay)]: 1,&#10;      [Symbol(kBytesRead)]: 0,&#10;      [Symbol(kBytesWritten)]: 0&#10;    },&#10;    _header: 'POST /api/generate HTTP/1.1\r\n' +&#10;      'Accept: application/json, text/plain, */*\r\n' +&#10;      'Content-Type: application/json\r\n' +&#10;      'User-Agent: axios/1.7.7\r\n' +&#10;      'Content-Length: 999\r\n' +&#10;      'Accept-Encoding: gzip, compress, deflate, br\r\n' +&#10;      'Host: localhost:11434\r\n' +&#10;      'Connection: keep-alive\r\n' +&#10;      '\r\n',&#10;    _keepAliveTimeout: 0,&#10;    _onPendingData: [Function: nop],&#10;    agent: Agent {&#10;      _events: [Object: null prototype],&#10;      _eventsCount: 2,&#10;      _maxListeners: undefined,&#10;      defaultPort: 80,&#10;      protocol: 'http:',&#10;      options: [Object: null prototype],&#10;      requests: [Object: null prototype] {},&#10;      sockets: [Object: null prototype] {},&#10;      freeSockets: [Object: null prototype],&#10;      keepAliveMsecs: 1000,&#10;      keepAlive: true,&#10;      maxSockets: Infinity,&#10;      maxFreeSockets: 256,&#10;      scheduling: 'lifo',&#10;      maxTotalSockets: Infinity,&#10;      totalSocketCount: 1,&#10;      [Symbol(shapeMode)]: false,&#10;      [Symbol(kCapture)]: false&#10;    },&#10;    socketPath: undefined,&#10;    method: 'POST',&#10;    maxHeaderSize: undefined,&#10;    insecureHTTPParser: undefined,&#10;    joinDuplicateHeaders: undefined,&#10;    path: '/api/generate',&#10;    _ended: true,&#10;    res: IncomingMessage {&#10;      _events: [Object],&#10;      _readableState: [ReadableState],&#10;      _maxListeners: undefined,&#10;      socket: null,&#10;      httpVersionMajor: 1,&#10;      httpVersionMinor: 1,&#10;      httpVersion: '1.1',&#10;      complete: true,&#10;      rawHeaders: [Array],&#10;      rawTrailers: [],&#10;      joinDuplicateHeaders: undefined,&#10;      aborted: false,&#10;      upgrade: false,&#10;      url: '',&#10;      method: null,&#10;      statusCode: 500,&#10;      statusMessage: 'Internal Server Error',&#10;      client: [Socket],&#10;      _consuming: false,&#10;      _dumped: false,&#10;      req: [Circular *1],&#10;      _eventsCount: 4,&#10;      responseUrl: 'http://localhost:11434/api/generate',&#10;      redirects: [],&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kHeaders)]: [Object],&#10;      [Symbol(kHeadersCount)]: 6,&#10;      [Symbol(kTrailers)]: null,&#10;      [Symbol(kTrailersCount)]: 0&#10;    },&#10;    aborted: false,&#10;    timeoutCb: null,&#10;    upgradeOrConnect: false,&#10;    parser: null,&#10;    maxHeadersCount: null,&#10;    reusedSocket: true,&#10;    host: 'localhost',&#10;    protocol: 'http:',&#10;    _redirectable: Writable {&#10;      _events: [Object],&#10;      _writableState: [WritableState],&#10;      _maxListeners: undefined,&#10;      _options: [Object],&#10;      _ended: true,&#10;      _ending: true,&#10;      _redirectCount: 0,&#10;      _redirects: [],&#10;      _requestBodyLength: 999,&#10;      _requestBodyBuffers: [],&#10;      _eventsCount: 3,&#10;      _onNativeResponse: [Function (anonymous)],&#10;      _currentRequest: [Circular *1],&#10;      _currentUrl: 'http://localhost:11434/api/generate',&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false&#10;    },&#10;    [Symbol(shapeMode)]: false,&#10;    [Symbol(kCapture)]: false,&#10;    [Symbol(kBytesWritten)]: 0,&#10;    [Symbol(kNeedDrain)]: false,&#10;    [Symbol(corked)]: 0,&#10;    [Symbol(kOutHeaders)]: [Object: null prototype] {&#10;      accept: [Array],&#10;      'content-type': [Array],&#10;      'user-agent': [Array],&#10;      'content-length': [Array],&#10;      'accept-encoding': [Array],&#10;      host: [Array]&#10;    },&#10;    [Symbol(errored)]: null,&#10;    [Symbol(kHighWaterMark)]: 16384,&#10;    [Symbol(kRejectNonStandardBodyWrites)]: false,&#10;    [Symbol(kUniqueHeaders)]: null&#10;  },&#10;  response: {&#10;    status: 500,&#10;    statusText: 'Internal Server Error',&#10;    headers: Object [AxiosHeaders] {&#10;      'content-type': 'application/json; charset=utf-8',&#10;      date: 'Sat, 02 Nov 2024 21:12:10 GMT',&#10;      'content-length': '83'&#10;    },&#10;    config: {&#10;      transitional: [Object],&#10;      adapter: [Array],&#10;      transformRequest: [Array],&#10;      transformResponse: [Array],&#10;      timeout: 0,&#10;      xsrfCookieName: 'XSRF-TOKEN',&#10;      xsrfHeaderName: 'X-XSRF-TOKEN',&#10;      maxContentLength: -1,&#10;      maxBodyLength: -1,&#10;      env: [Object],&#10;      validateStatus: [Function: validateStatus],&#10;      headers: [Object [AxiosHeaders]],&#10;      signal: [AbortSignal],&#10;      method: 'post',&#10;      url: 'http://localhost:11434/api/generate',&#10;      data: `{&quot;model&quot;:&quot;llama2&quot;,&quot;prompt&quot;:&quot;You are NASA's Space Duck, an AI assistant specializing in space science and exploration. \\n        Your core responsibilities:\\n        - Provide accurate, NASA-sourced information about space, astronomy, and space exploration\\n        - Explain complex space concepts in simple, engaging terms\\n        - Share interesting facts about NASA missions, both historical and current\\n        - Encourage scientific thinking and space enthusiasm\\n        \\n        Response guidelines:\\n        - Keep answers concise (2-3 sentences for general responses)\\n        - Use precise scientific terminology with brief explanations\\n        - Include relevant NASA mission references when applicable\\n        - Maintain professional tone while being approachable\\n        - Focus on verified scientific facts\\n        \\n        If unsure about any information, acknowledge uncertainty and suggest referring to NASA's official resources.\\n\\nUser: hello&quot;,&quot;stream&quot;:false,&quot;context&quot;:[]}`&#10;    },&#10;    request: &lt;ref *1&gt; ClientRequest {&#10;      _events: [Object: null prototype],&#10;      _eventsCount: 7,&#10;      _maxListeners: undefined,&#10;      outputData: [],&#10;      outputSize: 0,&#10;      writable: true,&#10;      destroyed: true,&#10;      _last: false,&#10;      chunkedEncoding: false,&#10;      shouldKeepAlive: true,&#10;      maxRequestsOnConnectionReached: false,&#10;      _defaultKeepAlive: true,&#10;      useChunkedEncodingByDefault: true,&#10;      sendDate: false,&#10;      _removedConnection: false,&#10;      _removedContLen: false,&#10;      _removedTE: false,&#10;      strictContentLength: false,&#10;      _contentLength: '999',&#10;      _hasBody: true,&#10;      _trailer: '',&#10;      finished: true,&#10;      _headerSent: true,&#10;      _closed: true,&#10;      socket: [Socket],&#10;      _header: 'POST /api/generate HTTP/1.1\r\n' +&#10;        'Accept: application/json, text/plain, */*\r\n' +&#10;        'Content-Type: application/json\r\n' +&#10;        'User-Agent: axios/1.7.7\r\n' +&#10;        'Content-Length: 999\r\n' +&#10;        'Accept-Encoding: gzip, compress, deflate, br\r\n' +&#10;        'Host: localhost:11434\r\n' +&#10;        'Connection: keep-alive\r\n' +&#10;        '\r\n',&#10;      _keepAliveTimeout: 0,&#10;      _onPendingData: [Function: nop],&#10;      agent: [Agent],&#10;      socketPath: undefined,&#10;      method: 'POST',&#10;      maxHeaderSize: undefined,&#10;      insecureHTTPParser: undefined,&#10;      joinDuplicateHeaders: undefined,&#10;      path: '/api/generate',&#10;      _ended: true,&#10;      res: [IncomingMessage],&#10;      aborted: false,&#10;      timeoutCb: null,&#10;      upgradeOrConnect: false,&#10;      parser: null,&#10;      maxHeadersCount: null,&#10;      reusedSocket: true,&#10;      host: 'localhost',&#10;      protocol: 'http:',&#10;      _redirectable: [Writable],&#10;      [Symbol(shapeMode)]: false,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kBytesWritten)]: 0,&#10;      [Symbol(kNeedDrain)]: false,&#10;      [Symbol(corked)]: 0,&#10;      [Symbol(kOutHeaders)]: [Object: null prototype],&#10;      [Symbol(errored)]: null,&#10;      [Symbol(kHighWaterMark)]: 16384,&#10;      [Symbol(kRejectNonStandardBodyWrites)]: false,&#10;      [Symbol(kUniqueHeaders)]: null&#10;    },&#10;    data: {&#10;      error: 'model requires more system memory (8.4 GiB) than is available (7.2 GiB)'&#10;    }&#10;  },&#10;  status: 500&#10;}&#10;Retry attempt 2 after error: Failed to get response from Ollama: Request failed with status code 500&#10;Ollama chat error: AxiosError: Request failed with status code 500&#10;    at settle (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:2019:12)&#10;    at IncomingMessage.handleStreamEnd (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:3135:11)&#10;    at IncomingMessage.emit (node:events:531:35)&#10;    at endReadableNT (node:internal/streams/readable:1696:12)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)&#10;    at Axios.request (/home/barthmalemew/WebstormProjects/SpaceDuck/node_modules/axios/dist/node/axios.cjs:4287:41)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)&#10;    at async OllamaService._attemptChat (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/ollama.js:109:30)&#10;    at async OllamaService.chat (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/ollama.js:91:34)&#10;    at async /home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js:74:26 {&#10;  code: 'ERR_BAD_RESPONSE',&#10;  config: {&#10;    transitional: {&#10;      silentJSONParsing: true,&#10;      forcedJSONParsing: true,&#10;      clarifyTimeoutError: false&#10;    },&#10;    adapter: [ 'xhr', 'http', 'fetch' ],&#10;    transformRequest: [ [Function: transformRequest] ],&#10;    transformResponse: [ [Function: transformResponse] ],&#10;    timeout: 0,&#10;    xsrfCookieName: 'XSRF-TOKEN',&#10;    xsrfHeaderName: 'X-XSRF-TOKEN',&#10;    maxContentLength: -1,&#10;    maxBodyLength: -1,&#10;    env: { FormData: [Function], Blob: [class Blob] },&#10;    validateStatus: [Function: validateStatus],&#10;    headers: Object [AxiosHeaders] {&#10;      Accept: 'application/json, text/plain, */*',&#10;      'Content-Type': 'application/json',&#10;      'User-Agent': 'axios/1.7.7',&#10;      'Content-Length': '999',&#10;      'Accept-Encoding': 'gzip, compress, deflate, br'&#10;    },&#10;    signal: AbortSignal { aborted: false },&#10;    method: 'post',&#10;    url: 'http://localhost:11434/api/generate',&#10;    data: `{&quot;model&quot;:&quot;llama2&quot;,&quot;prompt&quot;:&quot;You are NASA's Space Duck, an AI assistant specializing in space science and exploration. \\n        Your core responsibilities:\\n        - Provide accurate, NASA-sourced information about space, astronomy, and space exploration\\n        - Explain complex space concepts in simple, engaging terms\\n        - Share interesting facts about NASA missions, both historical and current\\n        - Encourage scientific thinking and space enthusiasm\\n        \\n        Response guidelines:\\n        - Keep answers concise (2-3 sentences for general responses)\\n        - Use precise scientific terminology with brief explanations\\n        - Include relevant NASA mission references when applicable\\n        - Maintain professional tone while being approachable\\n        - Focus on verified scientific facts\\n        \\n        If unsure about any information, acknowledge uncertainty and suggest referring to NASA's official resources.\\n\\nUser: hello&quot;,&quot;stream&quot;:false,&quot;context&quot;:[]}`&#10;  },&#10;  request: &lt;ref *1&gt; ClientRequest {&#10;    _events: [Object: null prototype] {&#10;      abort: [Function (anonymous)],&#10;      aborted: [Function (anonymous)],&#10;      connect: [Function (anonymous)],&#10;      error: [Function (anonymous)],&#10;      socket: [Function (anonymous)],&#10;      timeout: [Function (anonymous)],&#10;      finish: [Function: requestOnFinish]&#10;    },&#10;    _eventsCount: 7,&#10;    _maxListeners: undefined,&#10;    outputData: [],&#10;    outputSize: 0,&#10;    writable: true,&#10;    destroyed: true,&#10;    _last: false,&#10;    chunkedEncoding: false,&#10;    shouldKeepAlive: true,&#10;    maxRequestsOnConnectionReached: false,&#10;    _defaultKeepAlive: true,&#10;    useChunkedEncodingByDefault: true,&#10;    sendDate: false,&#10;    _removedConnection: false,&#10;    _removedContLen: false,&#10;    _removedTE: false,&#10;    strictContentLength: false,&#10;    _contentLength: '999',&#10;    _hasBody: true,&#10;    _trailer: '',&#10;    finished: true,&#10;    _headerSent: true,&#10;    _closed: true,&#10;    socket: Socket {&#10;      connecting: false,&#10;      _hadError: false,&#10;      _parent: null,&#10;      _host: 'localhost',&#10;      _closeAfterHandlingError: false,&#10;      _events: [Object],&#10;      _readableState: [ReadableState],&#10;      _writableState: [WritableState],&#10;      allowHalfOpen: false,&#10;      _maxListeners: undefined,&#10;      _eventsCount: 6,&#10;      _sockname: null,&#10;      _pendingData: null,&#10;      _pendingEncoding: '',&#10;      server: null,&#10;      _server: null,&#10;      timeout: 5000,&#10;      parser: null,&#10;      _httpMessage: null,&#10;      autoSelectFamilyAttemptedAddresses: [Array],&#10;      [Symbol(async_id_symbol)]: -1,&#10;      [Symbol(kHandle)]: [TCP],&#10;      [Symbol(lastWriteQueueSize)]: 0,&#10;      [Symbol(timeout)]: Timeout {&#10;        _idleTimeout: 5000,&#10;        _idlePrev: [TimersList],&#10;        _idleNext: [TimersList],&#10;        _idleStart: 22632,&#10;        _onTimeout: [Function: bound ],&#10;        _timerArgs: undefined,&#10;        _repeat: null,&#10;        _destroyed: false,&#10;        [Symbol(refed)]: false,&#10;        [Symbol(kHasPrimitive)]: false,&#10;        [Symbol(asyncId)]: 305,&#10;        [Symbol(triggerId)]: 303&#10;      },&#10;      [Symbol(kBuffer)]: null,&#10;      [Symbol(kBufferCb)]: null,&#10;      [Symbol(kBufferGen)]: null,&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kSetNoDelay)]: true,&#10;      [Symbol(kSetKeepAlive)]: true,&#10;      [Symbol(kSetKeepAliveInitialDelay)]: 1,&#10;      [Symbol(kBytesRead)]: 0,&#10;      [Symbol(kBytesWritten)]: 0&#10;    },&#10;    _header: 'POST /api/generate HTTP/1.1\r\n' +&#10;      'Accept: application/json, text/plain, */*\r\n' +&#10;      'Content-Type: application/json\r\n' +&#10;      'User-Agent: axios/1.7.7\r\n' +&#10;      'Content-Length: 999\r\n' +&#10;      'Accept-Encoding: gzip, compress, deflate, br\r\n' +&#10;      'Host: localhost:11434\r\n' +&#10;      'Connection: keep-alive\r\n' +&#10;      '\r\n',&#10;    _keepAliveTimeout: 0,&#10;    _onPendingData: [Function: nop],&#10;    agent: Agent {&#10;      _events: [Object: null prototype],&#10;      _eventsCount: 2,&#10;      _maxListeners: undefined,&#10;      defaultPort: 80,&#10;      protocol: 'http:',&#10;      options: [Object: null prototype],&#10;      requests: [Object: null prototype] {},&#10;      sockets: [Object: null prototype] {},&#10;      freeSockets: [Object: null prototype],&#10;      keepAliveMsecs: 1000,&#10;      keepAlive: true,&#10;      maxSockets: Infinity,&#10;      maxFreeSockets: 256,&#10;      scheduling: 'lifo',&#10;      maxTotalSockets: Infinity,&#10;      totalSocketCount: 1,&#10;      [Symbol(shapeMode)]: false,&#10;      [Symbol(kCapture)]: false&#10;    },&#10;    socketPath: undefined,&#10;    method: 'POST',&#10;    maxHeaderSize: undefined,&#10;    insecureHTTPParser: undefined,&#10;    joinDuplicateHeaders: undefined,&#10;    path: '/api/generate',&#10;    _ended: true,&#10;    res: IncomingMessage {&#10;      _events: [Object],&#10;      _readableState: [ReadableState],&#10;      _maxListeners: undefined,&#10;      socket: null,&#10;      httpVersionMajor: 1,&#10;      httpVersionMinor: 1,&#10;      httpVersion: '1.1',&#10;      complete: true,&#10;      rawHeaders: [Array],&#10;      rawTrailers: [],&#10;      joinDuplicateHeaders: undefined,&#10;      aborted: false,&#10;      upgrade: false,&#10;      url: '',&#10;      method: null,&#10;      statusCode: 500,&#10;      statusMessage: 'Internal Server Error',&#10;      client: [Socket],&#10;      _consuming: false,&#10;      _dumped: false,&#10;      req: [Circular *1],&#10;      _eventsCount: 4,&#10;      responseUrl: 'http://localhost:11434/api/generate',&#10;      redirects: [],&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kHeaders)]: [Object],&#10;      [Symbol(kHeadersCount)]: 6,&#10;      [Symbol(kTrailers)]: null,&#10;      [Symbol(kTrailersCount)]: 0&#10;    },&#10;    aborted: false,&#10;    timeoutCb: null,&#10;    upgradeOrConnect: false,&#10;    parser: null,&#10;    maxHeadersCount: null,&#10;    reusedSocket: true,&#10;    host: 'localhost',&#10;    protocol: 'http:',&#10;    _redirectable: Writable {&#10;      _events: [Object],&#10;      _writableState: [WritableState],&#10;      _maxListeners: undefined,&#10;      _options: [Object],&#10;      _ended: true,&#10;      _ending: true,&#10;      _redirectCount: 0,&#10;      _redirects: [],&#10;      _requestBodyLength: 999,&#10;      _requestBodyBuffers: [],&#10;      _eventsCount: 3,&#10;      _onNativeResponse: [Function (anonymous)],&#10;      _currentRequest: [Circular *1],&#10;      _currentUrl: 'http://localhost:11434/api/generate',&#10;      [Symbol(shapeMode)]: true,&#10;      [Symbol(kCapture)]: false&#10;    },&#10;    [Symbol(shapeMode)]: false,&#10;    [Symbol(kCapture)]: false,&#10;    [Symbol(kBytesWritten)]: 0,&#10;    [Symbol(kNeedDrain)]: false,&#10;    [Symbol(corked)]: 0,&#10;    [Symbol(kOutHeaders)]: [Object: null prototype] {&#10;      accept: [Array],&#10;      'content-type': [Array],&#10;      'user-agent': [Array],&#10;      'content-length': [Array],&#10;      'accept-encoding': [Array],&#10;      host: [Array]&#10;    },&#10;    [Symbol(errored)]: null,&#10;    [Symbol(kHighWaterMark)]: 16384,&#10;    [Symbol(kRejectNonStandardBodyWrites)]: false,&#10;    [Symbol(kUniqueHeaders)]: null&#10;  },&#10;  response: {&#10;    status: 500,&#10;    statusText: 'Internal Server Error',&#10;    headers: Object [AxiosHeaders] {&#10;      'content-type': 'application/json; charset=utf-8',&#10;      date: 'Sat, 02 Nov 2024 21:12:12 GMT',&#10;      'content-length': '83'&#10;    },&#10;    config: {&#10;      transitional: [Object],&#10;      adapter: [Array],&#10;      transformRequest: [Array],&#10;      transformResponse: [Array],&#10;      timeout: 0,&#10;      xsrfCookieName: 'XSRF-TOKEN',&#10;      xsrfHeaderName: 'X-XSRF-TOKEN',&#10;      maxContentLength: -1,&#10;      maxBodyLength: -1,&#10;      env: [Object],&#10;      validateStatus: [Function: validateStatus],&#10;      headers: [Object [AxiosHeaders]],&#10;      signal: [AbortSignal],&#10;      method: 'post',&#10;      url: 'http://localhost:11434/api/generate',&#10;      data: `{&quot;model&quot;:&quot;llama2&quot;,&quot;prompt&quot;:&quot;You are NASA's Space Duck, an AI assistant specializing in space science and exploration. \\n        Your core responsibilities:\\n        - Provide accurate, NASA-sourced information about space, astronomy, and space exploration\\n        - Explain complex space concepts in simple, engaging terms\\n        - Share interesting facts about NASA missions, both historical and current\\n        - Encourage scientific thinking and space enthusiasm\\n        \\n        Response guidelines:\\n        - Keep answers concise (2-3 sentences for general responses)\\n        - Use precise scientific terminology with brief explanations\\n        - Include relevant NASA mission references when applicable\\n        - Maintain professional tone while being approachable\\n        - Focus on verified scientific facts\\n        \\n        If unsure about any information, acknowledge uncertainty and suggest referring to NASA's official resources.\\n\\nUser: hello&quot;,&quot;stream&quot;:false,&quot;context&quot;:[]}`&#10;    },&#10;    request: &lt;ref *1&gt; ClientRequest {&#10;      _events: [Object: null prototype],&#10;      _eventsCount: 7,&#10;      _maxListeners: undefined,&#10;      outputData: [],&#10;      outputSize: 0,&#10;      writable: true,&#10;      destroyed: true,&#10;      _last: false,&#10;      chunkedEncoding: false,&#10;      shouldKeepAlive: true,&#10;      maxRequestsOnConnectionReached: false,&#10;      _defaultKeepAlive: true,&#10;      useChunkedEncodingByDefault: true,&#10;      sendDate: false,&#10;      _removedConnection: false,&#10;      _removedContLen: false,&#10;      _removedTE: false,&#10;      strictContentLength: false,&#10;      _contentLength: '999',&#10;      _hasBody: true,&#10;      _trailer: '',&#10;      finished: true,&#10;      _headerSent: true,&#10;      _closed: true,&#10;      socket: [Socket],&#10;      _header: 'POST /api/generate HTTP/1.1\r\n' +&#10;        'Accept: application/json, text/plain, */*\r\n' +&#10;        'Content-Type: application/json\r\n' +&#10;        'User-Agent: axios/1.7.7\r\n' +&#10;        'Content-Length: 999\r\n' +&#10;        'Accept-Encoding: gzip, compress, deflate, br\r\n' +&#10;        'Host: localhost:11434\r\n' +&#10;        'Connection: keep-alive\r\n' +&#10;        '\r\n',&#10;      _keepAliveTimeout: 0,&#10;      _onPendingData: [Function: nop],&#10;      agent: [Agent],&#10;      socketPath: undefined,&#10;      method: 'POST',&#10;      maxHeaderSize: undefined,&#10;      insecureHTTPParser: undefined,&#10;      joinDuplicateHeaders: undefined,&#10;      path: '/api/generate',&#10;      _ended: true,&#10;      res: [IncomingMessage],&#10;      aborted: false,&#10;      timeoutCb: null,&#10;      upgradeOrConnect: false,&#10;      parser: null,&#10;      maxHeadersCount: null,&#10;      reusedSocket: true,&#10;      host: 'localhost',&#10;      protocol: 'http:',&#10;      _redirectable: [Writable],&#10;      [Symbol(shapeMode)]: false,&#10;      [Symbol(kCapture)]: false,&#10;      [Symbol(kBytesWritten)]: 0,&#10;      [Symbol(kNeedDrain)]: false,&#10;      [Symbol(corked)]: 0,&#10;      [Symbol(kOutHeaders)]: [Object: null prototype],&#10;      [Symbol(errored)]: null,&#10;      [Symbol(kHighWaterMark)]: 16384,&#10;      [Symbol(kRejectNonStandardBodyWrites)]: false,&#10;      [Symbol(kUniqueHeaders)]: null&#10;    },&#10;    data: {&#10;      error: 'model requires more system memory (8.4 GiB) than is available (7.2 GiB)'&#10;    }&#10;  },&#10;  status: 500&#10;}&#10;Chat error: Error: Failed to get response from Ollama: Request failed with status code 500&#10;    at OllamaService._attemptChat (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/ollama.js:135:19)&#10;    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)&#10;    at async OllamaService.chat (/home/barthmalemew/WebstormProjects/SpaceDuck/webapp/services/ollama.js:91:34)&#10;    at async /home/barthmalemew/WebstormProjects/SpaceDuck/webapp/server.js:74:26&#10;&#10;" />
      </list>
    </option>
    <option name="selectedModel" value="codebuddy:CLAUDE_3.5_SONNET_V7" />
    <option name="ttsEnabled" value="false" />
  </component>
</project>